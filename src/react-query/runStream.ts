/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { runStream } from "../funcs/runStream.js";
import { EventStream } from "../lib/event-streams.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type RunStreamMutationVariables = {
  request: operations.CreateRunStreamRunStreamPostData;
  options?: RequestOptions;
};

export type RunStreamMutationData = EventStream<components.RunStream>;

/**
 * Run a workflow in stream
 *
 * @remarks
 * Create a new workflow run with the given parameters. This function sets up the run and initiates the execution process. For callback information, see [Callbacks](#tag/callbacks/POST/\{callback_url\}).
 *
 * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export function useRunStreamMutation(
  options?: MutationHookOptions<
    RunStreamMutationData,
    Error,
    RunStreamMutationVariables
  >,
): UseMutationResult<RunStreamMutationData, Error, RunStreamMutationVariables> {
  const client = useComfyDeployContext();
  return useMutation({
    ...buildRunStreamMutation(client, options),
    ...options,
  });
}

export function mutationKeyRunStream(): MutationKey {
  return ["comfydeploy", "Run", "stream"];
}

export function buildRunStreamMutation(
  client$: ComfyDeployCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: RunStreamMutationVariables,
  ) => Promise<RunStreamMutationData>;
} {
  return {
    mutationKey: mutationKeyRunStream(),
    mutationFn: function runStreamMutationFn({
      request,
      options,
    }): Promise<RunStreamMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(runStream(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

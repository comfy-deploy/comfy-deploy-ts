/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { deploymentsCreate } from "../funcs/deploymentsCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type DeploymentsCreateMutationVariables = {
  request: components.DeploymentCreate;
  options?: RequestOptions;
};

export type DeploymentsCreateMutationData = components.DeploymentModel;

/**
 * Create Deployment
 */
export function useDeploymentsCreateMutation(
  options?: MutationHookOptions<
    DeploymentsCreateMutationData,
    Error,
    DeploymentsCreateMutationVariables
  >,
): UseMutationResult<
  DeploymentsCreateMutationData,
  Error,
  DeploymentsCreateMutationVariables
> {
  const client = useComfyDeployContext();
  return useMutation({
    ...buildDeploymentsCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyDeploymentsCreate(): MutationKey {
  return ["comfydeploy", "Deployments", "create"];
}

export function buildDeploymentsCreateMutation(
  client$: ComfyDeployCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: DeploymentsCreateMutationVariables,
  ) => Promise<DeploymentsCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyDeploymentsCreate(),
    mutationFn: function deploymentsCreateMutationFn({
      request,
      options,
    }): Promise<DeploymentsCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(deploymentsCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

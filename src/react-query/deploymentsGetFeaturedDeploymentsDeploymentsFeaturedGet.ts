/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { deploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet } from "../funcs/deploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData =
  Array<components.DeploymentFeaturedModel>;

/**
 * Get Featured Deployments
 */
export function useDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet(
  options?: QueryHookOptions<
    DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData
  >,
): UseQueryResult<
  DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData,
  Error
> {
  const client = useComfyDeployContext();
  return useQuery({
    ...buildDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Get Featured Deployments
 */
export function useDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetSuspense(
  options?: SuspenseQueryHookOptions<
    DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData
  >,
): UseSuspenseQueryResult<
  DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData,
  Error
> {
  const client = useComfyDeployContext();
  return useSuspenseQuery({
    ...buildDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet(
  queryClient: QueryClient,
  client$: ComfyDeployCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQuery(
      client$,
    ),
  });
}

export function setDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetData(
  client: QueryClient,
  data: DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData,
):
  | DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData
  | undefined
{
  const key = queryKeyDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet();

  return client.setQueryData<
    DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData
  >(key, data);
}

export function invalidateAllDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "comfydeploy",
      "Deployments",
      "getFeaturedDeploymentsDeploymentsFeaturedGet",
    ],
  });
}

export function buildDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQuery(
  client$: ComfyDeployCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData
  >;
} {
  return {
    queryKey: queryKeyDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet(),
    queryFn:
      async function deploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryFn(
        ctx,
      ): Promise<
        DeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGetQueryData
      > {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(
          deploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet(
            client$,
            mergedOptions,
          ),
        );
      },
  };
}

export function queryKeyDeploymentsGetFeaturedDeploymentsDeploymentsFeaturedGet(): QueryKey {
  return [
    "comfydeploy",
    "Deployments",
    "getFeaturedDeploymentsDeploymentsFeaturedGet",
  ];
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { sessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost } from "../funcs/sessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationVariables =
  {
    request:
      operations.IncreaseTimeout2SessionSessionIdIncreaseTimeoutPostRequest;
    options?: RequestOptions;
  };

export type SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationData =
  any;

/**
 * Increase Timeout 2
 */
export function useSessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutation(
  options?: MutationHookOptions<
    SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationData,
    Error,
    SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationVariables
  >,
): UseMutationResult<
  SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationData,
  Error,
  SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationVariables
> {
  const client = useComfyDeployContext();
  return useMutation({
    ...buildSessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeySessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost(): MutationKey {
  return [
    "comfydeploy",
    "Session",
    "increaseTimeout2SessionSessionIdIncreaseTimeoutPost",
  ];
}

export function buildSessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutation(
  client$: ComfyDeployCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables:
      SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationVariables,
  ) => Promise<
    SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationData
  >;
} {
  return {
    mutationKey:
      mutationKeySessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost(),
    mutationFn:
      function sessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationFn(
        {
          request,
          options,
        },
      ): Promise<
        SessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPostMutationData
      > {
        const mergedOptions = {
          ...hookOptions,
          ...options,
          fetchOptions: {
            ...hookOptions?.fetchOptions,
            ...options?.fetchOptions,
            signal: combineSignals(
              hookOptions?.fetchOptions?.signal,
              options?.fetchOptions?.signal,
            ),
          },
        };
        return unwrapAsync(
          sessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}

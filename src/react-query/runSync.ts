/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { runSync } from "../funcs/runSync.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type RunSyncMutationVariables = {
  request: operations.CreateRunSyncRunSyncPostData;
  options?: RequestOptions;
};

export type RunSyncMutationData = Array<components.WorkflowRunOutputModel>;

/**
 * Run a workflow in sync
 *
 * @remarks
 * Create a new workflow run with the given parameters. This function sets up the run and initiates the execution process. For callback information, see [Callbacks](#tag/callbacks/POST/\{callback_url\}).
 *
 * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export function useRunSyncMutation(
  options?: MutationHookOptions<
    RunSyncMutationData,
    Error,
    RunSyncMutationVariables
  >,
): UseMutationResult<RunSyncMutationData, Error, RunSyncMutationVariables> {
  const client = useComfyDeployContext();
  return useMutation({
    ...buildRunSyncMutation(client, options),
    ...options,
  });
}

export function mutationKeyRunSync(): MutationKey {
  return ["comfydeploy", "Run", "sync"];
}

export function buildRunSyncMutation(
  client$: ComfyDeployCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: RunSyncMutationVariables,
  ) => Promise<RunSyncMutationData>;
} {
  return {
    mutationKey: mutationKeyRunSync(),
    mutationFn: function runSyncMutationFn({
      request,
      options,
    }): Promise<RunSyncMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(runSync(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

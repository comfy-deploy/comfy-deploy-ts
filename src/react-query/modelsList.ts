/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { modelsList } from "../funcs/modelsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type ModelsListQueryData = Array<components.ModelWithMetadata>;

/**
 * Public Models
 *
 * @remarks
 * Return a list of available public models with their input/output specifications
 */
export function useModelsList(
  options?: QueryHookOptions<ModelsListQueryData>,
): UseQueryResult<ModelsListQueryData, Error> {
  const client = useComfyDeployContext();
  return useQuery({
    ...buildModelsListQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Public Models
 *
 * @remarks
 * Return a list of available public models with their input/output specifications
 */
export function useModelsListSuspense(
  options?: SuspenseQueryHookOptions<ModelsListQueryData>,
): UseSuspenseQueryResult<ModelsListQueryData, Error> {
  const client = useComfyDeployContext();
  return useSuspenseQuery({
    ...buildModelsListQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchModelsList(
  queryClient: QueryClient,
  client$: ComfyDeployCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildModelsListQuery(
      client$,
    ),
  });
}

export function setModelsListData(
  client: QueryClient,
  data: ModelsListQueryData,
): ModelsListQueryData | undefined {
  const key = queryKeyModelsList();

  return client.setQueryData<ModelsListQueryData>(key, data);
}

export function invalidateAllModelsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "Models", "list"],
  });
}

export function buildModelsListQuery(
  client$: ComfyDeployCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ModelsListQueryData>;
} {
  return {
    queryKey: queryKeyModelsList(),
    queryFn: async function modelsListQueryFn(
      ctx,
    ): Promise<ModelsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(modelsList(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyModelsList(): QueryKey {
  return ["comfydeploy", "Models", "list"];
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { filesGet } from "../funcs/filesGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type FilesGetQueryData = components.AssetResponse;

/**
 * Get Asset
 */
export function useFilesGet(
  request: operations.GetAssetAssetsAssetIdGetRequest,
  options?: QueryHookOptions<FilesGetQueryData>,
): UseQueryResult<FilesGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useQuery({
    ...buildFilesGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get Asset
 */
export function useFilesGetSuspense(
  request: operations.GetAssetAssetsAssetIdGetRequest,
  options?: SuspenseQueryHookOptions<FilesGetQueryData>,
): UseSuspenseQueryResult<FilesGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useSuspenseQuery({
    ...buildFilesGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchFilesGet(
  queryClient: QueryClient,
  client$: ComfyDeployCore,
  request: operations.GetAssetAssetsAssetIdGetRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildFilesGetQuery(
      client$,
      request,
    ),
  });
}

export function setFilesGetData(
  client: QueryClient,
  queryKeyBase: [assetId: string],
  data: FilesGetQueryData,
): FilesGetQueryData | undefined {
  const key = queryKeyFilesGet(...queryKeyBase);

  return client.setQueryData<FilesGetQueryData>(key, data);
}

export function invalidateFilesGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[assetId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "files", "get", ...queryKeyBase],
  });
}

export function invalidateAllFilesGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "files", "get"],
  });
}

export function buildFilesGetQuery(
  client$: ComfyDeployCore,
  request: operations.GetAssetAssetsAssetIdGetRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<FilesGetQueryData>;
} {
  return {
    queryKey: queryKeyFilesGet(request.assetId),
    queryFn: async function filesGetQueryFn(ctx): Promise<FilesGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(filesGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyFilesGet(assetId: string): QueryKey {
  return ["comfydeploy", "files", "get", assetId];
}

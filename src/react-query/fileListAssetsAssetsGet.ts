/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { fileListAssetsAssetsGet } from "../funcs/fileListAssetsAssetsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type FileListAssetsAssetsGetQueryData = Array<components.AssetResponse>;

/**
 * List Assets
 */
export function useFileListAssetsAssetsGet(
  request: operations.ListAssetsAssetsGetRequest,
  options?: QueryHookOptions<FileListAssetsAssetsGetQueryData>,
): UseQueryResult<FileListAssetsAssetsGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useQuery({
    ...buildFileListAssetsAssetsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List Assets
 */
export function useFileListAssetsAssetsGetSuspense(
  request: operations.ListAssetsAssetsGetRequest,
  options?: SuspenseQueryHookOptions<FileListAssetsAssetsGetQueryData>,
): UseSuspenseQueryResult<FileListAssetsAssetsGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useSuspenseQuery({
    ...buildFileListAssetsAssetsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchFileListAssetsAssetsGet(
  queryClient: QueryClient,
  client$: ComfyDeployCore,
  request: operations.ListAssetsAssetsGetRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildFileListAssetsAssetsGetQuery(
      client$,
      request,
    ),
  });
}

export function setFileListAssetsAssetsGetData(
  client: QueryClient,
  queryKeyBase: [parameters: { path?: string | undefined }],
  data: FileListAssetsAssetsGetQueryData,
): FileListAssetsAssetsGetQueryData | undefined {
  const key = queryKeyFileListAssetsAssetsGet(...queryKeyBase);

  return client.setQueryData<FileListAssetsAssetsGetQueryData>(key, data);
}

export function invalidateFileListAssetsAssetsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[parameters: { path?: string | undefined }]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "File", "listAssetsAssetsGet", ...queryKeyBase],
  });
}

export function invalidateAllFileListAssetsAssetsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "File", "listAssetsAssetsGet"],
  });
}

export function buildFileListAssetsAssetsGetQuery(
  client$: ComfyDeployCore,
  request: operations.ListAssetsAssetsGetRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<FileListAssetsAssetsGetQueryData>;
} {
  return {
    queryKey: queryKeyFileListAssetsAssetsGet({ path: request.path }),
    queryFn: async function fileListAssetsAssetsGetQueryFn(
      ctx,
    ): Promise<FileListAssetsAssetsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(fileListAssetsAssetsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyFileListAssetsAssetsGet(
  parameters: { path?: string | undefined },
): QueryKey {
  return ["comfydeploy", "File", "listAssetsAssetsGet", parameters];
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { sessionSnapshotSessionSessionSessionIdSnapshotPost } from "../funcs/sessionSnapshotSessionSessionSessionIdSnapshotPost.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SessionSnapshotSessionSessionSessionIdSnapshotPostMutationVariables =
  {
    request: operations.SnapshotSessionSessionSessionIdSnapshotPostRequest;
    options?: RequestOptions;
  };

export type SessionSnapshotSessionSessionSessionIdSnapshotPostMutationData =
  any;

/**
 * Snapshot Session
 */
export function useSessionSnapshotSessionSessionSessionIdSnapshotPostMutation(
  options?: MutationHookOptions<
    SessionSnapshotSessionSessionSessionIdSnapshotPostMutationData,
    Error,
    SessionSnapshotSessionSessionSessionIdSnapshotPostMutationVariables
  >,
): UseMutationResult<
  SessionSnapshotSessionSessionSessionIdSnapshotPostMutationData,
  Error,
  SessionSnapshotSessionSessionSessionIdSnapshotPostMutationVariables
> {
  const client = useComfyDeployContext();
  return useMutation({
    ...buildSessionSnapshotSessionSessionSessionIdSnapshotPostMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeySessionSnapshotSessionSessionSessionIdSnapshotPost(): MutationKey {
  return [
    "comfydeploy",
    "Session",
    "snapshotSessionSessionSessionIdSnapshotPost",
  ];
}

export function buildSessionSnapshotSessionSessionSessionIdSnapshotPostMutation(
  client$: ComfyDeployCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables:
      SessionSnapshotSessionSessionSessionIdSnapshotPostMutationVariables,
  ) => Promise<SessionSnapshotSessionSessionSessionIdSnapshotPostMutationData>;
} {
  return {
    mutationKey:
      mutationKeySessionSnapshotSessionSessionSessionIdSnapshotPost(),
    mutationFn:
      function sessionSnapshotSessionSessionSessionIdSnapshotPostMutationFn({
        request,
        options,
      }): Promise<
        SessionSnapshotSessionSessionSessionIdSnapshotPostMutationData
      > {
        const mergedOptions = {
          ...hookOptions,
          ...options,
          fetchOptions: {
            ...hookOptions?.fetchOptions,
            ...options?.fetchOptions,
            signal: combineSignals(
              hookOptions?.fetchOptions?.signal,
              options?.fetchOptions?.signal,
            ),
          },
        };
        return unwrapAsync(sessionSnapshotSessionSessionSessionIdSnapshotPost(
          client$,
          request,
          mergedOptions,
        ));
      },
  };
}

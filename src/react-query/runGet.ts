/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { runGet } from "../funcs/runGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type RunGetQueryData = components.WorkflowRunModel;

/**
 * Get Run
 */
export function useRunGet(
  request: operations.GetRunRunRunIdGetRequest,
  options?: QueryHookOptions<RunGetQueryData>,
): UseQueryResult<RunGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useQuery({
    ...buildRunGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get Run
 */
export function useRunGetSuspense(
  request: operations.GetRunRunRunIdGetRequest,
  options?: SuspenseQueryHookOptions<RunGetQueryData>,
): UseSuspenseQueryResult<RunGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useSuspenseQuery({
    ...buildRunGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchRunGet(
  queryClient: QueryClient,
  client$: ComfyDeployCore,
  request: operations.GetRunRunRunIdGetRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildRunGetQuery(
      client$,
      request,
    ),
  });
}

export function setRunGetData(
  client: QueryClient,
  queryKeyBase: [runId: string],
  data: RunGetQueryData,
): RunGetQueryData | undefined {
  const key = queryKeyRunGet(...queryKeyBase);

  return client.setQueryData<RunGetQueryData>(key, data);
}

export function invalidateRunGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[runId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "Run", "get", ...queryKeyBase],
  });
}

export function invalidateAllRunGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "Run", "get"],
  });
}

export function buildRunGetQuery(
  client$: ComfyDeployCore,
  request: operations.GetRunRunRunIdGetRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<RunGetQueryData>;
} {
  return {
    queryKey: queryKeyRunGet(request.runId),
    queryFn: async function runGetQueryFn(ctx): Promise<RunGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(runGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyRunGet(runId: string): QueryKey {
  return ["comfydeploy", "Run", "get", runId];
}

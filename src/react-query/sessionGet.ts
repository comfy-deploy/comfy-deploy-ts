/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { sessionGet } from "../funcs/sessionGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SessionGetQueryData = components.Session;

/**
 * Get Session
 */
export function useSessionGet(
  request: operations.GetSessionSessionSessionIdGetRequest,
  options?: QueryHookOptions<SessionGetQueryData>,
): UseQueryResult<SessionGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useQuery({
    ...buildSessionGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get Session
 */
export function useSessionGetSuspense(
  request: operations.GetSessionSessionSessionIdGetRequest,
  options?: SuspenseQueryHookOptions<SessionGetQueryData>,
): UseSuspenseQueryResult<SessionGetQueryData, Error> {
  const client = useComfyDeployContext();
  return useSuspenseQuery({
    ...buildSessionGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSessionGet(
  queryClient: QueryClient,
  client$: ComfyDeployCore,
  request: operations.GetSessionSessionSessionIdGetRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSessionGetQuery(
      client$,
      request,
    ),
  });
}

export function setSessionGetData(
  client: QueryClient,
  queryKeyBase: [sessionId: string],
  data: SessionGetQueryData,
): SessionGetQueryData | undefined {
  const key = queryKeySessionGet(...queryKeyBase);

  return client.setQueryData<SessionGetQueryData>(key, data);
}

export function invalidateSessionGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[sessionId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "Session", "get", ...queryKeyBase],
  });
}

export function invalidateAllSessionGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "Session", "get"],
  });
}

export function buildSessionGetQuery(
  client$: ComfyDeployCore,
  request: operations.GetSessionSessionSessionIdGetRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SessionGetQueryData>;
} {
  return {
    queryKey: queryKeySessionGet(request.sessionId),
    queryFn: async function sessionGetQueryFn(
      ctx,
    ): Promise<SessionGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(sessionGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySessionGet(sessionId: string): QueryKey {
  return ["comfydeploy", "Session", "get", sessionId];
}

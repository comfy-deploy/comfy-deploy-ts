/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { searchModel } from "../funcs/searchModel.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SearchModelQueryData = components.SearchModelsResponse;

/**
 * Search
 */
export function useSearchModel(
  request: operations.SearchSearchModelGetRequest,
  options?: QueryHookOptions<SearchModelQueryData>,
): UseQueryResult<SearchModelQueryData, Error> {
  const client = useComfyDeployContext();
  return useQuery({
    ...buildSearchModelQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Search
 */
export function useSearchModelSuspense(
  request: operations.SearchSearchModelGetRequest,
  options?: SuspenseQueryHookOptions<SearchModelQueryData>,
): UseSuspenseQueryResult<SearchModelQueryData, Error> {
  const client = useComfyDeployContext();
  return useSuspenseQuery({
    ...buildSearchModelQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSearchModel(
  queryClient: QueryClient,
  client$: ComfyDeployCore,
  request: operations.SearchSearchModelGetRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSearchModelQuery(
      client$,
      request,
    ),
  });
}

export function setSearchModelData(
  client: QueryClient,
  queryKeyBase: [parameters: { query: string; provider?: string | undefined }],
  data: SearchModelQueryData,
): SearchModelQueryData | undefined {
  const key = queryKeySearchModel(...queryKeyBase);

  return client.setQueryData<SearchModelQueryData>(key, data);
}

export function invalidateSearchModel(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { query: string; provider?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "Search", "model", ...queryKeyBase],
  });
}

export function invalidateAllSearchModel(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["comfydeploy", "Search", "model"],
  });
}

export function buildSearchModelQuery(
  client$: ComfyDeployCore,
  request: operations.SearchSearchModelGetRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SearchModelQueryData>;
} {
  return {
    queryKey: queryKeySearchModel({
      query: request.query,
      provider: request.provider,
    }),
    queryFn: async function searchModelQueryFn(
      ctx,
    ): Promise<SearchModelQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(searchModel(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySearchModel(
  parameters: { query: string; provider?: string | undefined },
): QueryKey {
  return ["comfydeploy", "Search", "model", parameters];
}

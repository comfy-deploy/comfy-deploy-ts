/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { ComfyDeployCore } from "../core.js";
import { sessionIncreaseTimeoutSessionIncreaseTimeoutPost } from "../funcs/sessionIncreaseTimeoutSessionIncreaseTimeoutPost.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useComfyDeployContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationVariables =
  {
    request: components.IncreaseTimeoutBody;
    options?: RequestOptions;
  };

export type SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationData = any;

/**
 * Increase Timeout
 */
export function useSessionIncreaseTimeoutSessionIncreaseTimeoutPostMutation(
  options?: MutationHookOptions<
    SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationData,
    Error,
    SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationVariables
  >,
): UseMutationResult<
  SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationData,
  Error,
  SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationVariables
> {
  const client = useComfyDeployContext();
  return useMutation({
    ...buildSessionIncreaseTimeoutSessionIncreaseTimeoutPostMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeySessionIncreaseTimeoutSessionIncreaseTimeoutPost(): MutationKey {
  return [
    "comfydeploy",
    "Session",
    "increaseTimeoutSessionIncreaseTimeoutPost",
  ];
}

export function buildSessionIncreaseTimeoutSessionIncreaseTimeoutPostMutation(
  client$: ComfyDeployCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables:
      SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationVariables,
  ) => Promise<SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationData>;
} {
  return {
    mutationKey: mutationKeySessionIncreaseTimeoutSessionIncreaseTimeoutPost(),
    mutationFn:
      function sessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationFn({
        request,
        options,
      }): Promise<
        SessionIncreaseTimeoutSessionIncreaseTimeoutPostMutationData
      > {
        const mergedOptions = {
          ...hookOptions,
          ...options,
          fetchOptions: {
            ...hookOptions?.fetchOptions,
            ...options?.fetchOptions,
            signal: combineSignals(
              hookOptions?.fetchOptions?.signal,
              options?.fetchOptions?.signal,
            ),
          },
        };
        return unwrapAsync(sessionIncreaseTimeoutSessionIncreaseTimeoutPost(
          client$,
          request,
          mergedOptions,
        ));
      },
  };
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventUpdate,
  EventUpdate$inboundSchema,
  EventUpdate$Outbound,
  EventUpdate$outboundSchema,
} from "./eventupdate.js";

export type EventUpdateEvent = {
  event?: "event_update" | undefined;
  data: EventUpdate;
};

/** @internal */
export const EventUpdateEvent$inboundSchema: z.ZodType<
  EventUpdateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.literal("event_update").default("event_update"),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(EventUpdate$inboundSchema),
});

/** @internal */
export type EventUpdateEvent$Outbound = {
  event: "event_update";
  data: EventUpdate$Outbound;
};

/** @internal */
export const EventUpdateEvent$outboundSchema: z.ZodType<
  EventUpdateEvent$Outbound,
  z.ZodTypeDef,
  EventUpdateEvent
> = z.object({
  event: z.literal("event_update").default("event_update" as const),
  data: EventUpdate$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventUpdateEvent$ {
  /** @deprecated use `EventUpdateEvent$inboundSchema` instead. */
  export const inboundSchema = EventUpdateEvent$inboundSchema;
  /** @deprecated use `EventUpdateEvent$outboundSchema` instead. */
  export const outboundSchema = EventUpdateEvent$outboundSchema;
  /** @deprecated use `EventUpdateEvent$Outbound` instead. */
  export type Outbound = EventUpdateEvent$Outbound;
}

export function eventUpdateEventToJSON(
  eventUpdateEvent: EventUpdateEvent,
): string {
  return JSON.stringify(
    EventUpdateEvent$outboundSchema.parse(eventUpdateEvent),
  );
}

export function eventUpdateEventFromJSON(
  jsonString: string,
): SafeParseResult<EventUpdateEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventUpdateEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventUpdateEvent' from JSON`,
  );
}

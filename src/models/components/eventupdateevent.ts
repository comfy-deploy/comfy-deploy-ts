/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  EventUpdate,
  EventUpdate$inboundSchema,
  EventUpdate$Outbound,
  EventUpdate$outboundSchema,
} from "./eventupdate.js";

export const EventUpdateEventEvent = {
  EventUpdate: "event_update",
} as const;
export type EventUpdateEventEvent = ClosedEnum<typeof EventUpdateEventEvent>;

export type EventUpdateEvent = {
  event?: "event_update" | undefined;
  data: EventUpdate;
};

/** @internal */
export const EventUpdateEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof EventUpdateEventEvent
> = z.nativeEnum(EventUpdateEventEvent);

/** @internal */
export const EventUpdateEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof EventUpdateEventEvent
> = EventUpdateEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventUpdateEventEvent$ {
  /** @deprecated use `EventUpdateEventEvent$inboundSchema` instead. */
  export const inboundSchema = EventUpdateEventEvent$inboundSchema;
  /** @deprecated use `EventUpdateEventEvent$outboundSchema` instead. */
  export const outboundSchema = EventUpdateEventEvent$outboundSchema;
}

/** @internal */
export const EventUpdateEvent$inboundSchema: z.ZodType<
  EventUpdateEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.literal("event_update").default("event_update"),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(EventUpdate$inboundSchema),
});

/** @internal */
export type EventUpdateEvent$Outbound = {
  event: "event_update";
  data: EventUpdate$Outbound;
};

/** @internal */
export const EventUpdateEvent$outboundSchema: z.ZodType<
  EventUpdateEvent$Outbound,
  z.ZodTypeDef,
  EventUpdateEvent
> = z.object({
  event: z.literal("event_update").default("event_update"),
  data: EventUpdate$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventUpdateEvent$ {
  /** @deprecated use `EventUpdateEvent$inboundSchema` instead. */
  export const inboundSchema = EventUpdateEvent$inboundSchema;
  /** @deprecated use `EventUpdateEvent$outboundSchema` instead. */
  export const outboundSchema = EventUpdateEvent$outboundSchema;
  /** @deprecated use `EventUpdateEvent$Outbound` instead. */
  export type Outbound = EventUpdateEvent$Outbound;
}

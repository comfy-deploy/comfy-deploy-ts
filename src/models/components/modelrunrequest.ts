/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModelRunRequestInputs =
  | string
  | number
  | number
  | boolean
  | Array<any>;

/**
 * The GPU to override the machine's default GPU
 */
export const ModelRunRequestGpu = {
  T4: "T4",
  L4: "L4",
  A10G: "A10G",
  L40S: "L40S",
  A100: "A100",
  A10080Gb: "A100-80GB",
  H100: "H100",
} as const;
/**
 * The GPU to override the machine's default GPU
 */
export type ModelRunRequestGpu = ClosedEnum<typeof ModelRunRequestGpu>;

export type ModelRunRequest = {
  /**
   * The inputs to the workflow
   */
  inputs?:
    | { [k: string]: string | number | number | boolean | Array<any> }
    | undefined;
  webhook?: string | undefined;
  webhookIntermediateStatus?: boolean | undefined;
  /**
   * The GPU to override the machine's default GPU
   */
  gpu?: ModelRunRequestGpu | undefined;
  modelId: string;
};

/** @internal */
export const ModelRunRequestInputs$inboundSchema: z.ZodType<
  ModelRunRequestInputs,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number().int(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type ModelRunRequestInputs$Outbound =
  | string
  | number
  | number
  | boolean
  | Array<any>;

/** @internal */
export const ModelRunRequestInputs$outboundSchema: z.ZodType<
  ModelRunRequestInputs$Outbound,
  z.ZodTypeDef,
  ModelRunRequestInputs
> = z.union([
  z.string(),
  z.number().int(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelRunRequestInputs$ {
  /** @deprecated use `ModelRunRequestInputs$inboundSchema` instead. */
  export const inboundSchema = ModelRunRequestInputs$inboundSchema;
  /** @deprecated use `ModelRunRequestInputs$outboundSchema` instead. */
  export const outboundSchema = ModelRunRequestInputs$outboundSchema;
  /** @deprecated use `ModelRunRequestInputs$Outbound` instead. */
  export type Outbound = ModelRunRequestInputs$Outbound;
}

export function modelRunRequestInputsToJSON(
  modelRunRequestInputs: ModelRunRequestInputs,
): string {
  return JSON.stringify(
    ModelRunRequestInputs$outboundSchema.parse(modelRunRequestInputs),
  );
}

export function modelRunRequestInputsFromJSON(
  jsonString: string,
): SafeParseResult<ModelRunRequestInputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelRunRequestInputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelRunRequestInputs' from JSON`,
  );
}

/** @internal */
export const ModelRunRequestGpu$inboundSchema: z.ZodNativeEnum<
  typeof ModelRunRequestGpu
> = z.nativeEnum(ModelRunRequestGpu);

/** @internal */
export const ModelRunRequestGpu$outboundSchema: z.ZodNativeEnum<
  typeof ModelRunRequestGpu
> = ModelRunRequestGpu$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelRunRequestGpu$ {
  /** @deprecated use `ModelRunRequestGpu$inboundSchema` instead. */
  export const inboundSchema = ModelRunRequestGpu$inboundSchema;
  /** @deprecated use `ModelRunRequestGpu$outboundSchema` instead. */
  export const outboundSchema = ModelRunRequestGpu$outboundSchema;
}

/** @internal */
export const ModelRunRequest$inboundSchema: z.ZodType<
  ModelRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  inputs: z.record(
    z.union([
      z.string(),
      z.number().int(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  webhook: z.string().optional(),
  webhook_intermediate_status: z.boolean().default(false),
  gpu: ModelRunRequestGpu$inboundSchema.optional(),
  model_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "webhook_intermediate_status": "webhookIntermediateStatus",
    "model_id": "modelId",
  });
});

/** @internal */
export type ModelRunRequest$Outbound = {
  inputs?:
    | { [k: string]: string | number | number | boolean | Array<any> }
    | undefined;
  webhook?: string | undefined;
  webhook_intermediate_status: boolean;
  gpu?: string | undefined;
  model_id: string;
};

/** @internal */
export const ModelRunRequest$outboundSchema: z.ZodType<
  ModelRunRequest$Outbound,
  z.ZodTypeDef,
  ModelRunRequest
> = z.object({
  inputs: z.record(
    z.union([
      z.string(),
      z.number().int(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  webhook: z.string().optional(),
  webhookIntermediateStatus: z.boolean().default(false),
  gpu: ModelRunRequestGpu$outboundSchema.optional(),
  modelId: z.string(),
}).transform((v) => {
  return remap$(v, {
    webhookIntermediateStatus: "webhook_intermediate_status",
    modelId: "model_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelRunRequest$ {
  /** @deprecated use `ModelRunRequest$inboundSchema` instead. */
  export const inboundSchema = ModelRunRequest$inboundSchema;
  /** @deprecated use `ModelRunRequest$outboundSchema` instead. */
  export const outboundSchema = ModelRunRequest$outboundSchema;
  /** @deprecated use `ModelRunRequest$Outbound` instead. */
  export type Outbound = ModelRunRequest$Outbound;
}

export function modelRunRequestToJSON(
  modelRunRequest: ModelRunRequest,
): string {
  return JSON.stringify(ModelRunRequest$outboundSchema.parse(modelRunRequest));
}

export function modelRunRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModelRunRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelRunRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelRunRequest' from JSON`,
  );
}

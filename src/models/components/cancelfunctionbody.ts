/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelFunctionBody = {
  functionId: string;
};

/** @internal */
export const CancelFunctionBody$inboundSchema: z.ZodType<
  CancelFunctionBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  function_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "function_id": "functionId",
  });
});

/** @internal */
export type CancelFunctionBody$Outbound = {
  function_id: string;
};

/** @internal */
export const CancelFunctionBody$outboundSchema: z.ZodType<
  CancelFunctionBody$Outbound,
  z.ZodTypeDef,
  CancelFunctionBody
> = z.object({
  functionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    functionId: "function_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelFunctionBody$ {
  /** @deprecated use `CancelFunctionBody$inboundSchema` instead. */
  export const inboundSchema = CancelFunctionBody$inboundSchema;
  /** @deprecated use `CancelFunctionBody$outboundSchema` instead. */
  export const outboundSchema = CancelFunctionBody$outboundSchema;
  /** @deprecated use `CancelFunctionBody$Outbound` instead. */
  export type Outbound = CancelFunctionBody$Outbound;
}

export function cancelFunctionBodyToJSON(
  cancelFunctionBody: CancelFunctionBody,
): string {
  return JSON.stringify(
    CancelFunctionBody$outboundSchema.parse(cancelFunctionBody),
  );
}

export function cancelFunctionBodyFromJSON(
  jsonString: string,
): SafeParseResult<CancelFunctionBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelFunctionBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelFunctionBody' from JSON`,
  );
}

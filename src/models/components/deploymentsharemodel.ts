/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InputTypes = {};

export type OutputTypes = {};

export type DeploymentShareModel = {
  id: string;
  userId: string;
  orgId: string | null;
  shareSlug: string;
  description?: string | null | undefined;
  workflow: { [k: string]: string | null };
  inputTypes: Array<InputTypes> | null;
  outputTypes: Array<OutputTypes> | null;
};

/** @internal */
export const InputTypes$inboundSchema: z.ZodType<
  InputTypes,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputTypes$Outbound = {};

/** @internal */
export const InputTypes$outboundSchema: z.ZodType<
  InputTypes$Outbound,
  z.ZodTypeDef,
  InputTypes
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputTypes$ {
  /** @deprecated use `InputTypes$inboundSchema` instead. */
  export const inboundSchema = InputTypes$inboundSchema;
  /** @deprecated use `InputTypes$outboundSchema` instead. */
  export const outboundSchema = InputTypes$outboundSchema;
  /** @deprecated use `InputTypes$Outbound` instead. */
  export type Outbound = InputTypes$Outbound;
}

export function inputTypesToJSON(inputTypes: InputTypes): string {
  return JSON.stringify(InputTypes$outboundSchema.parse(inputTypes));
}

export function inputTypesFromJSON(
  jsonString: string,
): SafeParseResult<InputTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputTypes' from JSON`,
  );
}

/** @internal */
export const OutputTypes$inboundSchema: z.ZodType<
  OutputTypes,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputTypes$Outbound = {};

/** @internal */
export const OutputTypes$outboundSchema: z.ZodType<
  OutputTypes$Outbound,
  z.ZodTypeDef,
  OutputTypes
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputTypes$ {
  /** @deprecated use `OutputTypes$inboundSchema` instead. */
  export const inboundSchema = OutputTypes$inboundSchema;
  /** @deprecated use `OutputTypes$outboundSchema` instead. */
  export const outboundSchema = OutputTypes$outboundSchema;
  /** @deprecated use `OutputTypes$Outbound` instead. */
  export type Outbound = OutputTypes$Outbound;
}

export function outputTypesToJSON(outputTypes: OutputTypes): string {
  return JSON.stringify(OutputTypes$outboundSchema.parse(outputTypes));
}

export function outputTypesFromJSON(
  jsonString: string,
): SafeParseResult<OutputTypes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputTypes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputTypes' from JSON`,
  );
}

/** @internal */
export const DeploymentShareModel$inboundSchema: z.ZodType<
  DeploymentShareModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  user_id: z.string(),
  org_id: z.nullable(z.string()),
  share_slug: z.string(),
  description: z.nullable(z.string()).optional(),
  workflow: z.record(z.nullable(z.string())),
  input_types: z.nullable(z.array(z.lazy(() => InputTypes$inboundSchema))),
  output_types: z.nullable(z.array(z.lazy(() => OutputTypes$inboundSchema))),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "org_id": "orgId",
    "share_slug": "shareSlug",
    "input_types": "inputTypes",
    "output_types": "outputTypes",
  });
});

/** @internal */
export type DeploymentShareModel$Outbound = {
  id: string;
  user_id: string;
  org_id: string | null;
  share_slug: string;
  description?: string | null | undefined;
  workflow: { [k: string]: string | null };
  input_types: Array<InputTypes$Outbound> | null;
  output_types: Array<OutputTypes$Outbound> | null;
};

/** @internal */
export const DeploymentShareModel$outboundSchema: z.ZodType<
  DeploymentShareModel$Outbound,
  z.ZodTypeDef,
  DeploymentShareModel
> = z.object({
  id: z.string(),
  userId: z.string(),
  orgId: z.nullable(z.string()),
  shareSlug: z.string(),
  description: z.nullable(z.string()).optional(),
  workflow: z.record(z.nullable(z.string())),
  inputTypes: z.nullable(z.array(z.lazy(() => InputTypes$outboundSchema))),
  outputTypes: z.nullable(z.array(z.lazy(() => OutputTypes$outboundSchema))),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    orgId: "org_id",
    shareSlug: "share_slug",
    inputTypes: "input_types",
    outputTypes: "output_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentShareModel$ {
  /** @deprecated use `DeploymentShareModel$inboundSchema` instead. */
  export const inboundSchema = DeploymentShareModel$inboundSchema;
  /** @deprecated use `DeploymentShareModel$outboundSchema` instead. */
  export const outboundSchema = DeploymentShareModel$outboundSchema;
  /** @deprecated use `DeploymentShareModel$Outbound` instead. */
  export type Outbound = DeploymentShareModel$Outbound;
}

export function deploymentShareModelToJSON(
  deploymentShareModel: DeploymentShareModel,
): string {
  return JSON.stringify(
    DeploymentShareModel$outboundSchema.parse(deploymentShareModel),
  );
}

export function deploymentShareModelFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentShareModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentShareModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentShareModel' from JSON`,
  );
}

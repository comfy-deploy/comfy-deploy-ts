/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventUpdateEvent,
  EventUpdateEvent$inboundSchema,
  EventUpdateEvent$Outbound,
  EventUpdateEvent$outboundSchema,
} from "./eventupdateevent.js";
import {
  LogUpdateEvent,
  LogUpdateEvent$inboundSchema,
  LogUpdateEvent$Outbound,
  LogUpdateEvent$outboundSchema,
} from "./logupdateevent.js";

export type RunStream =
  | (EventUpdateEvent & { event: "event_update" })
  | (LogUpdateEvent & { event: "log_update" });

/** @internal */
export const RunStream$inboundSchema: z.ZodType<
  RunStream,
  z.ZodTypeDef,
  unknown
> = z.union([
  EventUpdateEvent$inboundSchema.and(
    z.object({ event: z.literal("event_update") }).transform((v) => ({
      event: v.event,
    })),
  ),
  LogUpdateEvent$inboundSchema.and(
    z.object({ event: z.literal("log_update") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/** @internal */
export type RunStream$Outbound =
  | (EventUpdateEvent$Outbound & { event: "event_update" })
  | (LogUpdateEvent$Outbound & { event: "log_update" });

/** @internal */
export const RunStream$outboundSchema: z.ZodType<
  RunStream$Outbound,
  z.ZodTypeDef,
  RunStream
> = z.union([
  EventUpdateEvent$outboundSchema.and(
    z.object({ event: z.literal("event_update") }).transform((v) => ({
      event: v.event,
    })),
  ),
  LogUpdateEvent$outboundSchema.and(
    z.object({ event: z.literal("log_update") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStream$ {
  /** @deprecated use `RunStream$inboundSchema` instead. */
  export const inboundSchema = RunStream$inboundSchema;
  /** @deprecated use `RunStream$outboundSchema` instead. */
  export const outboundSchema = RunStream$outboundSchema;
  /** @deprecated use `RunStream$Outbound` instead. */
  export type Outbound = RunStream$Outbound;
}

export function runStreamToJSON(runStream: RunStream): string {
  return JSON.stringify(RunStream$outboundSchema.parse(runStream));
}

export function runStreamFromJSON(
  jsonString: string,
): SafeParseResult<RunStream, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunStream$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunStream' from JSON`,
  );
}

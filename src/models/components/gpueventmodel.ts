/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GPUProviderType,
  GPUProviderType$inboundSchema,
  GPUProviderType$outboundSchema,
} from "./gpuprovidertype.js";
import {
  MachineGPU,
  MachineGPU$inboundSchema,
  MachineGPU$outboundSchema,
} from "./machinegpu.js";

export type GPUEventModel = {
  id: string;
  userId: string;
  orgId: string | null;
  machineId: string | null;
  startTime: Date | null;
  endTime: Date | null;
  gpu: MachineGPU | null;
  wsGpu?: "4090" | null | undefined;
  gpuProvider: GPUProviderType;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  sessionTimeout?: number | null | undefined;
  sessionId?: string | null | undefined;
  modalFunctionId?: string | null | undefined;
  tunnelUrl?: string | null | undefined;
  costItemTitle?: string | null | undefined;
  cost?: number | null | undefined;
};

/** @internal */
export const GPUEventModel$inboundSchema: z.ZodType<
  GPUEventModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  user_id: z.string(),
  org_id: z.nullable(z.string()),
  machine_id: z.nullable(z.string()),
  start_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  gpu: z.nullable(MachineGPU$inboundSchema),
  ws_gpu: z.nullable(z.literal("4090")).optional(),
  gpu_provider: GPUProviderType$inboundSchema,
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  session_timeout: z.nullable(z.number().int()).optional(),
  session_id: z.nullable(z.string()).optional(),
  modal_function_id: z.nullable(z.string()).optional(),
  tunnel_url: z.nullable(z.string()).optional(),
  cost_item_title: z.nullable(z.string()).optional(),
  cost: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "org_id": "orgId",
    "machine_id": "machineId",
    "start_time": "startTime",
    "end_time": "endTime",
    "ws_gpu": "wsGpu",
    "gpu_provider": "gpuProvider",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "session_timeout": "sessionTimeout",
    "session_id": "sessionId",
    "modal_function_id": "modalFunctionId",
    "tunnel_url": "tunnelUrl",
    "cost_item_title": "costItemTitle",
  });
});

/** @internal */
export type GPUEventModel$Outbound = {
  id: string;
  user_id: string;
  org_id: string | null;
  machine_id: string | null;
  start_time: string | null;
  end_time: string | null;
  gpu: string | null;
  ws_gpu: "4090" | null;
  gpu_provider: string;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  session_timeout?: number | null | undefined;
  session_id?: string | null | undefined;
  modal_function_id?: string | null | undefined;
  tunnel_url?: string | null | undefined;
  cost_item_title?: string | null | undefined;
  cost?: number | null | undefined;
};

/** @internal */
export const GPUEventModel$outboundSchema: z.ZodType<
  GPUEventModel$Outbound,
  z.ZodTypeDef,
  GPUEventModel
> = z.object({
  id: z.string(),
  userId: z.string(),
  orgId: z.nullable(z.string()),
  machineId: z.nullable(z.string()),
  startTime: z.nullable(z.date().transform(v => v.toISOString())),
  endTime: z.nullable(z.date().transform(v => v.toISOString())),
  gpu: z.nullable(MachineGPU$outboundSchema),
  wsGpu: z.nullable(z.literal("4090").default("4090")),
  gpuProvider: GPUProviderType$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  updatedAt: z.date().transform(v => v.toISOString()).optional(),
  sessionTimeout: z.nullable(z.number().int()).optional(),
  sessionId: z.nullable(z.string()).optional(),
  modalFunctionId: z.nullable(z.string()).optional(),
  tunnelUrl: z.nullable(z.string()).optional(),
  costItemTitle: z.nullable(z.string()).optional(),
  cost: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    orgId: "org_id",
    machineId: "machine_id",
    startTime: "start_time",
    endTime: "end_time",
    wsGpu: "ws_gpu",
    gpuProvider: "gpu_provider",
    createdAt: "created_at",
    updatedAt: "updated_at",
    sessionTimeout: "session_timeout",
    sessionId: "session_id",
    modalFunctionId: "modal_function_id",
    tunnelUrl: "tunnel_url",
    costItemTitle: "cost_item_title",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GPUEventModel$ {
  /** @deprecated use `GPUEventModel$inboundSchema` instead. */
  export const inboundSchema = GPUEventModel$inboundSchema;
  /** @deprecated use `GPUEventModel$outboundSchema` instead. */
  export const outboundSchema = GPUEventModel$outboundSchema;
  /** @deprecated use `GPUEventModel$Outbound` instead. */
  export type Outbound = GPUEventModel$Outbound;
}

export function gpuEventModelToJSON(gpuEventModel: GPUEventModel): string {
  return JSON.stringify(GPUEventModel$outboundSchema.parse(gpuEventModel));
}

export function gpuEventModelFromJSON(
  jsonString: string,
): SafeParseResult<GPUEventModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GPUEventModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GPUEventModel' from JSON`,
  );
}

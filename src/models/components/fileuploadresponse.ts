/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FileUploadResponse = {
  /**
   * A message indicating the result of the file upload
   */
  message: string;
  /**
   * The unique identifier for the uploaded file
   */
  fileId: string;
  /**
   * The original name of the uploaded file
   */
  fileName: string;
  /**
   * The URL where the uploaded file can be accessed
   */
  fileUrl: string;
};

/** @internal */
export const FileUploadResponse$inboundSchema: z.ZodType<
  FileUploadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  file_id: z.string(),
  file_name: z.string(),
  file_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_name": "fileName",
    "file_url": "fileUrl",
  });
});

/** @internal */
export type FileUploadResponse$Outbound = {
  message: string;
  file_id: string;
  file_name: string;
  file_url: string;
};

/** @internal */
export const FileUploadResponse$outboundSchema: z.ZodType<
  FileUploadResponse$Outbound,
  z.ZodTypeDef,
  FileUploadResponse
> = z.object({
  message: z.string(),
  fileId: z.string(),
  fileName: z.string(),
  fileUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileName: "file_name",
    fileUrl: "file_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUploadResponse$ {
  /** @deprecated use `FileUploadResponse$inboundSchema` instead. */
  export const inboundSchema = FileUploadResponse$inboundSchema;
  /** @deprecated use `FileUploadResponse$outboundSchema` instead. */
  export const outboundSchema = FileUploadResponse$outboundSchema;
  /** @deprecated use `FileUploadResponse$Outbound` instead. */
  export type Outbound = FileUploadResponse$Outbound;
}

export function fileUploadResponseToJSON(
  fileUploadResponse: FileUploadResponse,
): string {
  return JSON.stringify(
    FileUploadResponse$outboundSchema.parse(fileUploadResponse),
  );
}

export function fileUploadResponseFromJSON(
  jsonString: string,
): SafeParseResult<FileUploadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUploadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUploadResponse' from JSON`,
  );
}

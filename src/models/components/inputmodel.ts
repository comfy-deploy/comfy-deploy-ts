/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DefaultValue = string | number | number | boolean | Array<any>;

export type MinValue = number | number;

export type MaxValue = number | number;

/**
 * Step for number slider input types
 */
export type Step = number | number;

export type InputModel = {
  type: string;
  classType: string;
  inputId: string;
  defaultValue?:
    | string
    | number
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  minValue?: number | number | null | undefined;
  maxValue?: number | number | null | undefined;
  displayName?: string | undefined;
  description?: string | undefined;
  /**
   * Options for enum input type
   */
  enumOptions?: Array<string> | null | undefined;
  /**
   * Step for number slider input types
   */
  step?: number | number | null | undefined;
};

/** @internal */
export const DefaultValue$inboundSchema: z.ZodType<
  DefaultValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number().int(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/** @internal */
export type DefaultValue$Outbound =
  | string
  | number
  | number
  | boolean
  | Array<any>;

/** @internal */
export const DefaultValue$outboundSchema: z.ZodType<
  DefaultValue$Outbound,
  z.ZodTypeDef,
  DefaultValue
> = z.union([
  z.string(),
  z.number().int(),
  z.number(),
  z.boolean(),
  z.array(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultValue$ {
  /** @deprecated use `DefaultValue$inboundSchema` instead. */
  export const inboundSchema = DefaultValue$inboundSchema;
  /** @deprecated use `DefaultValue$outboundSchema` instead. */
  export const outboundSchema = DefaultValue$outboundSchema;
  /** @deprecated use `DefaultValue$Outbound` instead. */
  export type Outbound = DefaultValue$Outbound;
}

export function defaultValueToJSON(defaultValue: DefaultValue): string {
  return JSON.stringify(DefaultValue$outboundSchema.parse(defaultValue));
}

export function defaultValueFromJSON(
  jsonString: string,
): SafeParseResult<DefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultValue' from JSON`,
  );
}

/** @internal */
export const MinValue$inboundSchema: z.ZodType<
  MinValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MinValue$Outbound = number | number;

/** @internal */
export const MinValue$outboundSchema: z.ZodType<
  MinValue$Outbound,
  z.ZodTypeDef,
  MinValue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MinValue$ {
  /** @deprecated use `MinValue$inboundSchema` instead. */
  export const inboundSchema = MinValue$inboundSchema;
  /** @deprecated use `MinValue$outboundSchema` instead. */
  export const outboundSchema = MinValue$outboundSchema;
  /** @deprecated use `MinValue$Outbound` instead. */
  export type Outbound = MinValue$Outbound;
}

export function minValueToJSON(minValue: MinValue): string {
  return JSON.stringify(MinValue$outboundSchema.parse(minValue));
}

export function minValueFromJSON(
  jsonString: string,
): SafeParseResult<MinValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MinValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MinValue' from JSON`,
  );
}

/** @internal */
export const MaxValue$inboundSchema: z.ZodType<
  MaxValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MaxValue$Outbound = number | number;

/** @internal */
export const MaxValue$outboundSchema: z.ZodType<
  MaxValue$Outbound,
  z.ZodTypeDef,
  MaxValue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaxValue$ {
  /** @deprecated use `MaxValue$inboundSchema` instead. */
  export const inboundSchema = MaxValue$inboundSchema;
  /** @deprecated use `MaxValue$outboundSchema` instead. */
  export const outboundSchema = MaxValue$outboundSchema;
  /** @deprecated use `MaxValue$Outbound` instead. */
  export type Outbound = MaxValue$Outbound;
}

export function maxValueToJSON(maxValue: MaxValue): string {
  return JSON.stringify(MaxValue$outboundSchema.parse(maxValue));
}

export function maxValueFromJSON(
  jsonString: string,
): SafeParseResult<MaxValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaxValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaxValue' from JSON`,
  );
}

/** @internal */
export const Step$inboundSchema: z.ZodType<Step, z.ZodTypeDef, unknown> = z
  .union([z.number().int(), z.number()]);

/** @internal */
export type Step$Outbound = number | number;

/** @internal */
export const Step$outboundSchema: z.ZodType<Step$Outbound, z.ZodTypeDef, Step> =
  z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Step$ {
  /** @deprecated use `Step$inboundSchema` instead. */
  export const inboundSchema = Step$inboundSchema;
  /** @deprecated use `Step$outboundSchema` instead. */
  export const outboundSchema = Step$outboundSchema;
  /** @deprecated use `Step$Outbound` instead. */
  export type Outbound = Step$Outbound;
}

export function stepToJSON(step: Step): string {
  return JSON.stringify(Step$outboundSchema.parse(step));
}

export function stepFromJSON(
  jsonString: string,
): SafeParseResult<Step, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Step$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Step' from JSON`,
  );
}

/** @internal */
export const InputModel$inboundSchema: z.ZodType<
  InputModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  class_type: z.string(),
  input_id: z.string(),
  default_value: z.nullable(
    z.union([
      z.string(),
      z.number().int(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  min_value: z.nullable(z.union([z.number().int(), z.number()])).optional(),
  max_value: z.nullable(z.union([z.number().int(), z.number()])).optional(),
  display_name: z.string().default(""),
  description: z.string().default(""),
  enum_options: z.nullable(z.array(z.string())).optional(),
  step: z.nullable(z.union([z.number().int(), z.number()])).optional(),
}).transform((v) => {
  return remap$(v, {
    "class_type": "classType",
    "input_id": "inputId",
    "default_value": "defaultValue",
    "min_value": "minValue",
    "max_value": "maxValue",
    "display_name": "displayName",
    "enum_options": "enumOptions",
  });
});

/** @internal */
export type InputModel$Outbound = {
  type: string;
  class_type: string;
  input_id: string;
  default_value?:
    | string
    | number
    | number
    | boolean
    | Array<any>
    | null
    | undefined;
  min_value?: number | number | null | undefined;
  max_value?: number | number | null | undefined;
  display_name: string;
  description: string;
  enum_options?: Array<string> | null | undefined;
  step?: number | number | null | undefined;
};

/** @internal */
export const InputModel$outboundSchema: z.ZodType<
  InputModel$Outbound,
  z.ZodTypeDef,
  InputModel
> = z.object({
  type: z.string(),
  classType: z.string(),
  inputId: z.string(),
  defaultValue: z.nullable(
    z.union([
      z.string(),
      z.number().int(),
      z.number(),
      z.boolean(),
      z.array(z.any()),
    ]),
  ).optional(),
  minValue: z.nullable(z.union([z.number().int(), z.number()])).optional(),
  maxValue: z.nullable(z.union([z.number().int(), z.number()])).optional(),
  displayName: z.string().default(""),
  description: z.string().default(""),
  enumOptions: z.nullable(z.array(z.string())).optional(),
  step: z.nullable(z.union([z.number().int(), z.number()])).optional(),
}).transform((v) => {
  return remap$(v, {
    classType: "class_type",
    inputId: "input_id",
    defaultValue: "default_value",
    minValue: "min_value",
    maxValue: "max_value",
    displayName: "display_name",
    enumOptions: "enum_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputModel$ {
  /** @deprecated use `InputModel$inboundSchema` instead. */
  export const inboundSchema = InputModel$inboundSchema;
  /** @deprecated use `InputModel$outboundSchema` instead. */
  export const outboundSchema = InputModel$outboundSchema;
  /** @deprecated use `InputModel$Outbound` instead. */
  export type Outbound = InputModel$Outbound;
}

export function inputModelToJSON(inputModel: InputModel): string {
  return JSON.stringify(InputModel$outboundSchema.parse(inputModel));
}

export function inputModelFromJSON(
  jsonString: string,
): SafeParseResult<InputModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputModel' from JSON`,
  );
}

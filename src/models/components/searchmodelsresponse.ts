/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ModelSearchQuery,
  ModelSearchQuery$inboundSchema,
  ModelSearchQuery$Outbound,
  ModelSearchQuery$outboundSchema,
} from "./modelsearchquery.js";

export type SearchModelsResponse = {
  models: Array<ModelSearchQuery>;
};

/** @internal */
export const SearchModelsResponse$inboundSchema: z.ZodType<
  SearchModelsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  models: z.array(ModelSearchQuery$inboundSchema),
});

/** @internal */
export type SearchModelsResponse$Outbound = {
  models: Array<ModelSearchQuery$Outbound>;
};

/** @internal */
export const SearchModelsResponse$outboundSchema: z.ZodType<
  SearchModelsResponse$Outbound,
  z.ZodTypeDef,
  SearchModelsResponse
> = z.object({
  models: z.array(ModelSearchQuery$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchModelsResponse$ {
  /** @deprecated use `SearchModelsResponse$inboundSchema` instead. */
  export const inboundSchema = SearchModelsResponse$inboundSchema;
  /** @deprecated use `SearchModelsResponse$outboundSchema` instead. */
  export const outboundSchema = SearchModelsResponse$outboundSchema;
  /** @deprecated use `SearchModelsResponse$Outbound` instead. */
  export type Outbound = SearchModelsResponse$Outbound;
}

export function searchModelsResponseToJSON(
  searchModelsResponse: SearchModelsResponse,
): string {
  return JSON.stringify(
    SearchModelsResponse$outboundSchema.parse(searchModelsResponse),
  );
}

export function searchModelsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchModelsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchModelsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchModelsResponse' from JSON`,
  );
}

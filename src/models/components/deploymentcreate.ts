/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeploymentCreate = {
  workflowVersionId: string;
  workflowId: string;
  machineId: string;
  environment: string;
};

/** @internal */
export const DeploymentCreate$inboundSchema: z.ZodType<
  DeploymentCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflow_version_id: z.string(),
  workflow_id: z.string(),
  machine_id: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workflow_version_id": "workflowVersionId",
    "workflow_id": "workflowId",
    "machine_id": "machineId",
  });
});

/** @internal */
export type DeploymentCreate$Outbound = {
  workflow_version_id: string;
  workflow_id: string;
  machine_id: string;
  environment: string;
};

/** @internal */
export const DeploymentCreate$outboundSchema: z.ZodType<
  DeploymentCreate$Outbound,
  z.ZodTypeDef,
  DeploymentCreate
> = z.object({
  workflowVersionId: z.string(),
  workflowId: z.string(),
  machineId: z.string(),
  environment: z.string(),
}).transform((v) => {
  return remap$(v, {
    workflowVersionId: "workflow_version_id",
    workflowId: "workflow_id",
    machineId: "machine_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploymentCreate$ {
  /** @deprecated use `DeploymentCreate$inboundSchema` instead. */
  export const inboundSchema = DeploymentCreate$inboundSchema;
  /** @deprecated use `DeploymentCreate$outboundSchema` instead. */
  export const outboundSchema = DeploymentCreate$outboundSchema;
  /** @deprecated use `DeploymentCreate$Outbound` instead. */
  export type Outbound = DeploymentCreate$Outbound;
}

export function deploymentCreateToJSON(
  deploymentCreate: DeploymentCreate,
): string {
  return JSON.stringify(
    DeploymentCreate$outboundSchema.parse(deploymentCreate),
  );
}

export function deploymentCreateFromJSON(
  jsonString: string,
): SafeParseResult<DeploymentCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploymentCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploymentCreate' from JSON`,
  );
}

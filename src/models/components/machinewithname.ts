/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MachineWithName = {
  id: string;
  name: string;
};

/** @internal */
export const MachineWithName$inboundSchema: z.ZodType<
  MachineWithName,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type MachineWithName$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const MachineWithName$outboundSchema: z.ZodType<
  MachineWithName$Outbound,
  z.ZodTypeDef,
  MachineWithName
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MachineWithName$ {
  /** @deprecated use `MachineWithName$inboundSchema` instead. */
  export const inboundSchema = MachineWithName$inboundSchema;
  /** @deprecated use `MachineWithName$outboundSchema` instead. */
  export const outboundSchema = MachineWithName$outboundSchema;
  /** @deprecated use `MachineWithName$Outbound` instead. */
  export type Outbound = MachineWithName$Outbound;
}

export function machineWithNameToJSON(
  machineWithName: MachineWithName,
): string {
  return JSON.stringify(MachineWithName$outboundSchema.parse(machineWithName));
}

export function machineWithNameFromJSON(
  jsonString: string,
): SafeParseResult<MachineWithName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MachineWithName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MachineWithName' from JSON`,
  );
}

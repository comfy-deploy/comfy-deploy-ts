/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type WorkflowRunOutputData = {};

export type WorkflowRunOutputNodeMeta = {};

export type WorkflowRunOutput = {
  id?: string | undefined;
  runId: string;
  data?: WorkflowRunOutputData | undefined;
  nodeMeta?: WorkflowRunOutputNodeMeta | undefined;
  createdAt: Date;
  updatedAt: Date;
};

/** @internal */
export const WorkflowRunOutputData$inboundSchema: z.ZodType<
  WorkflowRunOutputData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WorkflowRunOutputData$Outbound = {};

/** @internal */
export const WorkflowRunOutputData$outboundSchema: z.ZodType<
  WorkflowRunOutputData$Outbound,
  z.ZodTypeDef,
  WorkflowRunOutputData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowRunOutputData$ {
  /** @deprecated use `WorkflowRunOutputData$inboundSchema` instead. */
  export const inboundSchema = WorkflowRunOutputData$inboundSchema;
  /** @deprecated use `WorkflowRunOutputData$outboundSchema` instead. */
  export const outboundSchema = WorkflowRunOutputData$outboundSchema;
  /** @deprecated use `WorkflowRunOutputData$Outbound` instead. */
  export type Outbound = WorkflowRunOutputData$Outbound;
}

/** @internal */
export const WorkflowRunOutputNodeMeta$inboundSchema: z.ZodType<
  WorkflowRunOutputNodeMeta,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WorkflowRunOutputNodeMeta$Outbound = {};

/** @internal */
export const WorkflowRunOutputNodeMeta$outboundSchema: z.ZodType<
  WorkflowRunOutputNodeMeta$Outbound,
  z.ZodTypeDef,
  WorkflowRunOutputNodeMeta
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowRunOutputNodeMeta$ {
  /** @deprecated use `WorkflowRunOutputNodeMeta$inboundSchema` instead. */
  export const inboundSchema = WorkflowRunOutputNodeMeta$inboundSchema;
  /** @deprecated use `WorkflowRunOutputNodeMeta$outboundSchema` instead. */
  export const outboundSchema = WorkflowRunOutputNodeMeta$outboundSchema;
  /** @deprecated use `WorkflowRunOutputNodeMeta$Outbound` instead. */
  export type Outbound = WorkflowRunOutputNodeMeta$Outbound;
}

/** @internal */
export const WorkflowRunOutput$inboundSchema: z.ZodType<
  WorkflowRunOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  run_id: z.string(),
  data: z.lazy(() => WorkflowRunOutputData$inboundSchema).optional(),
  node_meta: z.lazy(() => WorkflowRunOutputNodeMeta$inboundSchema).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "run_id": "runId",
    "node_meta": "nodeMeta",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type WorkflowRunOutput$Outbound = {
  id?: string | undefined;
  run_id: string;
  data?: WorkflowRunOutputData$Outbound | undefined;
  node_meta?: WorkflowRunOutputNodeMeta$Outbound | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const WorkflowRunOutput$outboundSchema: z.ZodType<
  WorkflowRunOutput$Outbound,
  z.ZodTypeDef,
  WorkflowRunOutput
> = z.object({
  id: z.string().optional(),
  runId: z.string(),
  data: z.lazy(() => WorkflowRunOutputData$outboundSchema).optional(),
  nodeMeta: z.lazy(() => WorkflowRunOutputNodeMeta$outboundSchema).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    runId: "run_id",
    nodeMeta: "node_meta",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowRunOutput$ {
  /** @deprecated use `WorkflowRunOutput$inboundSchema` instead. */
  export const inboundSchema = WorkflowRunOutput$inboundSchema;
  /** @deprecated use `WorkflowRunOutput$outboundSchema` instead. */
  export const outboundSchema = WorkflowRunOutput$outboundSchema;
  /** @deprecated use `WorkflowRunOutput$Outbound` instead. */
  export type Outbound = WorkflowRunOutput$Outbound;
}

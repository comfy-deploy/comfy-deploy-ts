/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModelSearchQuery = {
  name?: string | undefined;
  type?: string | null | undefined;
  provider?: string | undefined;
  filename?: string | undefined;
  savePath?: string | undefined;
  size?: number | null | undefined;
  downloadUrl?: string | undefined;
  referenceUrl?: string | undefined;
};

/** @internal */
export const ModelSearchQuery$inboundSchema: z.ZodType<
  ModelSearchQuery,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  type: z.nullable(z.string()).optional(),
  provider: z.string().optional(),
  filename: z.string().optional(),
  save_path: z.string().optional(),
  size: z.nullable(z.number().int()).optional(),
  download_url: z.string().optional(),
  reference_url: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "save_path": "savePath",
    "download_url": "downloadUrl",
    "reference_url": "referenceUrl",
  });
});

/** @internal */
export type ModelSearchQuery$Outbound = {
  name?: string | undefined;
  type?: string | null | undefined;
  provider?: string | undefined;
  filename?: string | undefined;
  save_path?: string | undefined;
  size?: number | null | undefined;
  download_url?: string | undefined;
  reference_url?: string | undefined;
};

/** @internal */
export const ModelSearchQuery$outboundSchema: z.ZodType<
  ModelSearchQuery$Outbound,
  z.ZodTypeDef,
  ModelSearchQuery
> = z.object({
  name: z.string().optional(),
  type: z.nullable(z.string()).optional(),
  provider: z.string().optional(),
  filename: z.string().optional(),
  savePath: z.string().optional(),
  size: z.nullable(z.number().int()).optional(),
  downloadUrl: z.string().optional(),
  referenceUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    savePath: "save_path",
    downloadUrl: "download_url",
    referenceUrl: "reference_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelSearchQuery$ {
  /** @deprecated use `ModelSearchQuery$inboundSchema` instead. */
  export const inboundSchema = ModelSearchQuery$inboundSchema;
  /** @deprecated use `ModelSearchQuery$outboundSchema` instead. */
  export const outboundSchema = ModelSearchQuery$outboundSchema;
  /** @deprecated use `ModelSearchQuery$Outbound` instead. */
  export type Outbound = ModelSearchQuery$Outbound;
}

export function modelSearchQueryToJSON(
  modelSearchQuery: ModelSearchQuery,
): string {
  return JSON.stringify(
    ModelSearchQuery$outboundSchema.parse(modelSearchQuery),
  );
}

export function modelSearchQueryFromJSON(
  jsonString: string,
): SafeParseResult<ModelSearchQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelSearchQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelSearchQuery' from JSON`,
  );
}

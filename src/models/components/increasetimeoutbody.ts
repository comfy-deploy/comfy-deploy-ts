/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IncreaseTimeoutBody = {
  machineId: string;
  sessionId: string;
  timeout: number;
  gpu: string;
};

/** @internal */
export const IncreaseTimeoutBody$inboundSchema: z.ZodType<
  IncreaseTimeoutBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  machine_id: z.string(),
  session_id: z.string(),
  timeout: z.number().int(),
  gpu: z.string(),
}).transform((v) => {
  return remap$(v, {
    "machine_id": "machineId",
    "session_id": "sessionId",
  });
});

/** @internal */
export type IncreaseTimeoutBody$Outbound = {
  machine_id: string;
  session_id: string;
  timeout: number;
  gpu: string;
};

/** @internal */
export const IncreaseTimeoutBody$outboundSchema: z.ZodType<
  IncreaseTimeoutBody$Outbound,
  z.ZodTypeDef,
  IncreaseTimeoutBody
> = z.object({
  machineId: z.string(),
  sessionId: z.string(),
  timeout: z.number().int(),
  gpu: z.string(),
}).transform((v) => {
  return remap$(v, {
    machineId: "machine_id",
    sessionId: "session_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncreaseTimeoutBody$ {
  /** @deprecated use `IncreaseTimeoutBody$inboundSchema` instead. */
  export const inboundSchema = IncreaseTimeoutBody$inboundSchema;
  /** @deprecated use `IncreaseTimeoutBody$outboundSchema` instead. */
  export const outboundSchema = IncreaseTimeoutBody$outboundSchema;
  /** @deprecated use `IncreaseTimeoutBody$Outbound` instead. */
  export type Outbound = IncreaseTimeoutBody$Outbound;
}

export function increaseTimeoutBodyToJSON(
  increaseTimeoutBody: IncreaseTimeoutBody,
): string {
  return JSON.stringify(
    IncreaseTimeoutBody$outboundSchema.parse(increaseTimeoutBody),
  );
}

export function increaseTimeoutBodyFromJSON(
  jsonString: string,
): SafeParseResult<IncreaseTimeoutBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncreaseTimeoutBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncreaseTimeoutBody' from JSON`,
  );
}

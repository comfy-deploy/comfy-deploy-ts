/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OutputModel = {
  classType: string;
  outputId: string;
};

/** @internal */
export const OutputModel$inboundSchema: z.ZodType<
  OutputModel,
  z.ZodTypeDef,
  unknown
> = z.object({
  class_type: z.string(),
  output_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "class_type": "classType",
    "output_id": "outputId",
  });
});

/** @internal */
export type OutputModel$Outbound = {
  class_type: string;
  output_id: string;
};

/** @internal */
export const OutputModel$outboundSchema: z.ZodType<
  OutputModel$Outbound,
  z.ZodTypeDef,
  OutputModel
> = z.object({
  classType: z.string(),
  outputId: z.string(),
}).transform((v) => {
  return remap$(v, {
    classType: "class_type",
    outputId: "output_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputModel$ {
  /** @deprecated use `OutputModel$inboundSchema` instead. */
  export const inboundSchema = OutputModel$inboundSchema;
  /** @deprecated use `OutputModel$outboundSchema` instead. */
  export const outboundSchema = OutputModel$outboundSchema;
  /** @deprecated use `OutputModel$Outbound` instead. */
  export type Outbound = OutputModel$Outbound;
}

export function outputModelToJSON(outputModel: OutputModel): string {
  return JSON.stringify(OutputModel$outboundSchema.parse(outputModel));
}

export function outputModelFromJSON(
  jsonString: string,
): SafeParseResult<OutputModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputModel' from JSON`,
  );
}

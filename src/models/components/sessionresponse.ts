/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SessionResponse = {
  /**
   * The session ID
   */
  id: string;
  /**
   * The session ID
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  sessionId: string;
  /**
   * The GPU event ID
   */
  gpuEventId: string;
  /**
   * The tunnel URL for the session
   */
  url?: string | null | undefined;
  /**
   * The GPU type being used
   */
  gpu: string;
  /**
   * When the session was created
   */
  createdAt: Date;
  /**
   * Session timeout in minutes
   */
  timeout?: number | null | undefined;
  /**
   * When the session will timeout
   */
  timeoutEnd?: Date | null | undefined;
  /**
   * Associated machine ID
   */
  machineId?: string | null | undefined;
  /**
   * Associated machine version ID
   */
  machineVersionId?: string | null | undefined;
  /**
   * Session status
   */
  status?: string | undefined;
  /**
   * Associated user ID
   */
  userId?: string | null | undefined;
  /**
   * Associated organization ID
   */
  orgId?: string | null | undefined;
};

/** @internal */
export const SessionResponse$inboundSchema: z.ZodType<
  SessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  session_id: z.string(),
  gpu_event_id: z.string(),
  url: z.nullable(z.string()).optional(),
  gpu: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  timeout: z.nullable(z.number().int()).optional(),
  timeout_end: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  machine_id: z.nullable(z.string()).optional(),
  machine_version_id: z.nullable(z.string()).optional(),
  status: z.string().default("running"),
  user_id: z.nullable(z.string()).optional(),
  org_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "session_id": "sessionId",
    "gpu_event_id": "gpuEventId",
    "created_at": "createdAt",
    "timeout_end": "timeoutEnd",
    "machine_id": "machineId",
    "machine_version_id": "machineVersionId",
    "user_id": "userId",
    "org_id": "orgId",
  });
});

/** @internal */
export type SessionResponse$Outbound = {
  id: string;
  session_id: string;
  gpu_event_id: string;
  url?: string | null | undefined;
  gpu: string;
  created_at: string;
  timeout?: number | null | undefined;
  timeout_end?: string | null | undefined;
  machine_id?: string | null | undefined;
  machine_version_id?: string | null | undefined;
  status: string;
  user_id?: string | null | undefined;
  org_id?: string | null | undefined;
};

/** @internal */
export const SessionResponse$outboundSchema: z.ZodType<
  SessionResponse$Outbound,
  z.ZodTypeDef,
  SessionResponse
> = z.object({
  id: z.string(),
  sessionId: z.string(),
  gpuEventId: z.string(),
  url: z.nullable(z.string()).optional(),
  gpu: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  timeout: z.nullable(z.number().int()).optional(),
  timeoutEnd: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  machineId: z.nullable(z.string()).optional(),
  machineVersionId: z.nullable(z.string()).optional(),
  status: z.string().default("running"),
  userId: z.nullable(z.string()).optional(),
  orgId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    gpuEventId: "gpu_event_id",
    createdAt: "created_at",
    timeoutEnd: "timeout_end",
    machineId: "machine_id",
    machineVersionId: "machine_version_id",
    userId: "user_id",
    orgId: "org_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionResponse$ {
  /** @deprecated use `SessionResponse$inboundSchema` instead. */
  export const inboundSchema = SessionResponse$inboundSchema;
  /** @deprecated use `SessionResponse$outboundSchema` instead. */
  export const outboundSchema = SessionResponse$outboundSchema;
  /** @deprecated use `SessionResponse$Outbound` instead. */
  export type Outbound = SessionResponse$Outbound;
}

export function sessionResponseToJSON(
  sessionResponse: SessionResponse,
): string {
  return JSON.stringify(SessionResponse$outboundSchema.parse(sessionResponse));
}

export function sessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<SessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionResponse' from JSON`,
  );
}

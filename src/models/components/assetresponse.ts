/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssetResponse = {
  id: string;
  userId?: string | null | undefined;
  orgId?: string | null | undefined;
  name: string;
  isFolder: boolean;
  path: string;
  fileSize?: number | null | undefined;
  url?: string | null | undefined;
  mimeType?: string | null | undefined;
  createdAt: Date;
  updatedAt: Date;
  deleted?: boolean | null | undefined;
};

/** @internal */
export const AssetResponse$inboundSchema: z.ZodType<
  AssetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  user_id: z.nullable(z.string()).optional(),
  org_id: z.nullable(z.string()).optional(),
  name: z.string(),
  is_folder: z.boolean(),
  path: z.string(),
  file_size: z.nullable(z.number().int()).optional(),
  url: z.nullable(z.string()).optional(),
  mime_type: z.nullable(z.string()).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  deleted: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "org_id": "orgId",
    "is_folder": "isFolder",
    "file_size": "fileSize",
    "mime_type": "mimeType",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type AssetResponse$Outbound = {
  id: string;
  user_id?: string | null | undefined;
  org_id?: string | null | undefined;
  name: string;
  is_folder: boolean;
  path: string;
  file_size?: number | null | undefined;
  url?: string | null | undefined;
  mime_type?: string | null | undefined;
  created_at: string;
  updated_at: string;
  deleted?: boolean | null | undefined;
};

/** @internal */
export const AssetResponse$outboundSchema: z.ZodType<
  AssetResponse$Outbound,
  z.ZodTypeDef,
  AssetResponse
> = z.object({
  id: z.string(),
  userId: z.nullable(z.string()).optional(),
  orgId: z.nullable(z.string()).optional(),
  name: z.string(),
  isFolder: z.boolean(),
  path: z.string(),
  fileSize: z.nullable(z.number().int()).optional(),
  url: z.nullable(z.string()).optional(),
  mimeType: z.nullable(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  deleted: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    orgId: "org_id",
    isFolder: "is_folder",
    fileSize: "file_size",
    mimeType: "mime_type",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssetResponse$ {
  /** @deprecated use `AssetResponse$inboundSchema` instead. */
  export const inboundSchema = AssetResponse$inboundSchema;
  /** @deprecated use `AssetResponse$outboundSchema` instead. */
  export const outboundSchema = AssetResponse$outboundSchema;
  /** @deprecated use `AssetResponse$Outbound` instead. */
  export type Outbound = AssetResponse$Outbound;
}

export function assetResponseToJSON(assetResponse: AssetResponse): string {
  return JSON.stringify(AssetResponse$outboundSchema.parse(assetResponse));
}

export function assetResponseFromJSON(
  jsonString: string,
): SafeParseResult<AssetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssetResponse' from JSON`,
  );
}

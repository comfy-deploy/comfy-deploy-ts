/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const ExecutionMode = {
  Async: "async",
  Sync: "sync",
  SyncFirstResult: "sync_first_result",
  Stream: "stream",
} as const;
export type ExecutionMode = ClosedEnum<typeof ExecutionMode>;

export type Inputs = {};

export type WorkflowRunVersionRequest = {
  executionMode?: ExecutionMode | null | undefined;
  inputs?: Inputs | null | undefined;
  webhook?: string | null | undefined;
  webhookIntermediateStatus?: boolean | null | undefined;
  origin?: string | null | undefined;
  batchNumber?: number | null | undefined;
  /**
   * Optional dictionary of batch input parameters. Keys are input names, values are lists of inputs.
   */
  batchInputParams?: { [k: string]: Array<any> } | null | undefined;
  isNativeRun?: boolean | null | undefined;
  workflowVersionId: string;
  machineId?: string | null | undefined;
};

/** @internal */
export const ExecutionMode$inboundSchema: z.ZodNativeEnum<
  typeof ExecutionMode
> = z.nativeEnum(ExecutionMode);

/** @internal */
export const ExecutionMode$outboundSchema: z.ZodNativeEnum<
  typeof ExecutionMode
> = ExecutionMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExecutionMode$ {
  /** @deprecated use `ExecutionMode$inboundSchema` instead. */
  export const inboundSchema = ExecutionMode$inboundSchema;
  /** @deprecated use `ExecutionMode$outboundSchema` instead. */
  export const outboundSchema = ExecutionMode$outboundSchema;
}

/** @internal */
export const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Inputs$Outbound = {};

/** @internal */
export const Inputs$outboundSchema: z.ZodType<
  Inputs$Outbound,
  z.ZodTypeDef,
  Inputs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Inputs$ {
  /** @deprecated use `Inputs$inboundSchema` instead. */
  export const inboundSchema = Inputs$inboundSchema;
  /** @deprecated use `Inputs$outboundSchema` instead. */
  export const outboundSchema = Inputs$outboundSchema;
  /** @deprecated use `Inputs$Outbound` instead. */
  export type Outbound = Inputs$Outbound;
}

/** @internal */
export const WorkflowRunVersionRequest$inboundSchema: z.ZodType<
  WorkflowRunVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  execution_mode: z.nullable(ExecutionMode$inboundSchema).optional(),
  inputs: z.nullable(z.lazy(() => Inputs$inboundSchema)).optional(),
  webhook: z.nullable(z.string()).optional(),
  webhook_intermediate_status: z.nullable(z.boolean()).optional(),
  origin: z.nullable(z.string()).optional(),
  batch_number: z.nullable(z.number().int()).optional(),
  batch_input_params: z.nullable(z.record(z.array(z.any()))).optional(),
  is_native_run: z.nullable(z.boolean()).optional(),
  workflow_version_id: z.string(),
  machine_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "execution_mode": "executionMode",
    "webhook_intermediate_status": "webhookIntermediateStatus",
    "batch_number": "batchNumber",
    "batch_input_params": "batchInputParams",
    "is_native_run": "isNativeRun",
    "workflow_version_id": "workflowVersionId",
    "machine_id": "machineId",
  });
});

/** @internal */
export type WorkflowRunVersionRequest$Outbound = {
  execution_mode?: string | null | undefined;
  inputs?: Inputs$Outbound | null | undefined;
  webhook?: string | null | undefined;
  webhook_intermediate_status?: boolean | null | undefined;
  origin?: string | null | undefined;
  batch_number?: number | null | undefined;
  batch_input_params?: { [k: string]: Array<any> } | null | undefined;
  is_native_run?: boolean | null | undefined;
  workflow_version_id: string;
  machine_id?: string | null | undefined;
};

/** @internal */
export const WorkflowRunVersionRequest$outboundSchema: z.ZodType<
  WorkflowRunVersionRequest$Outbound,
  z.ZodTypeDef,
  WorkflowRunVersionRequest
> = z.object({
  executionMode: z.nullable(ExecutionMode$outboundSchema).optional(),
  inputs: z.nullable(z.lazy(() => Inputs$outboundSchema)).optional(),
  webhook: z.nullable(z.string()).optional(),
  webhookIntermediateStatus: z.nullable(z.boolean()).optional(),
  origin: z.nullable(z.string()).optional(),
  batchNumber: z.nullable(z.number().int()).optional(),
  batchInputParams: z.nullable(z.record(z.array(z.any()))).optional(),
  isNativeRun: z.nullable(z.boolean()).optional(),
  workflowVersionId: z.string(),
  machineId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    executionMode: "execution_mode",
    webhookIntermediateStatus: "webhook_intermediate_status",
    batchNumber: "batch_number",
    batchInputParams: "batch_input_params",
    isNativeRun: "is_native_run",
    workflowVersionId: "workflow_version_id",
    machineId: "machine_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowRunVersionRequest$ {
  /** @deprecated use `WorkflowRunVersionRequest$inboundSchema` instead. */
  export const inboundSchema = WorkflowRunVersionRequest$inboundSchema;
  /** @deprecated use `WorkflowRunVersionRequest$outboundSchema` instead. */
  export const outboundSchema = WorkflowRunVersionRequest$outboundSchema;
  /** @deprecated use `WorkflowRunVersionRequest$Outbound` instead. */
  export type Outbound = WorkflowRunVersionRequest$Outbound;
}

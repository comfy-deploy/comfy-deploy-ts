/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SnapshotSessionBody = {
  machineName?: string | null | undefined;
};

/** @internal */
export const SnapshotSessionBody$inboundSchema: z.ZodType<
  SnapshotSessionBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  machine_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "machine_name": "machineName",
  });
});

/** @internal */
export type SnapshotSessionBody$Outbound = {
  machine_name?: string | null | undefined;
};

/** @internal */
export const SnapshotSessionBody$outboundSchema: z.ZodType<
  SnapshotSessionBody$Outbound,
  z.ZodTypeDef,
  SnapshotSessionBody
> = z.object({
  machineName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    machineName: "machine_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnapshotSessionBody$ {
  /** @deprecated use `SnapshotSessionBody$inboundSchema` instead. */
  export const inboundSchema = SnapshotSessionBody$inboundSchema;
  /** @deprecated use `SnapshotSessionBody$outboundSchema` instead. */
  export const outboundSchema = SnapshotSessionBody$outboundSchema;
  /** @deprecated use `SnapshotSessionBody$Outbound` instead. */
  export type Outbound = SnapshotSessionBody$Outbound;
}

export function snapshotSessionBodyToJSON(
  snapshotSessionBody: SnapshotSessionBody,
): string {
  return JSON.stringify(
    SnapshotSessionBody$outboundSchema.parse(snapshotSessionBody),
  );
}

export function snapshotSessionBodyFromJSON(
  jsonString: string,
): SafeParseResult<SnapshotSessionBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SnapshotSessionBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SnapshotSessionBody' from JSON`,
  );
}

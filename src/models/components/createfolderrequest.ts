/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateFolderRequest = {
  /**
   * Folder name
   */
  name: string;
  /**
   * Parent folder path
   */
  parentPath?: string | null | undefined;
};

/** @internal */
export const CreateFolderRequest$inboundSchema: z.ZodType<
  CreateFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  parent_path: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "parent_path": "parentPath",
  });
});

/** @internal */
export type CreateFolderRequest$Outbound = {
  name: string;
  parent_path?: string | null | undefined;
};

/** @internal */
export const CreateFolderRequest$outboundSchema: z.ZodType<
  CreateFolderRequest$Outbound,
  z.ZodTypeDef,
  CreateFolderRequest
> = z.object({
  name: z.string(),
  parentPath: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    parentPath: "parent_path",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFolderRequest$ {
  /** @deprecated use `CreateFolderRequest$inboundSchema` instead. */
  export const inboundSchema = CreateFolderRequest$inboundSchema;
  /** @deprecated use `CreateFolderRequest$outboundSchema` instead. */
  export const outboundSchema = CreateFolderRequest$outboundSchema;
  /** @deprecated use `CreateFolderRequest$Outbound` instead. */
  export type Outbound = CreateFolderRequest$Outbound;
}

export function createFolderRequestToJSON(
  createFolderRequest: CreateFolderRequest,
): string {
  return JSON.stringify(
    CreateFolderRequest$outboundSchema.parse(createFolderRequest),
  );
}

export function createFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFolderRequest' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Session = {
  sessionId: string;
  gpuEventId: string;
  url: string | null;
  gpu: string;
  createdAt: Date;
  timeout: number | null;
  timeoutEnd: Date | null;
  machineId: string | null;
  machineVersionId: string | null;
};

/** @internal */
export const Session$inboundSchema: z.ZodType<Session, z.ZodTypeDef, unknown> =
  z.object({
    session_id: z.string(),
    gpu_event_id: z.string(),
    url: z.nullable(z.string()),
    gpu: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    timeout: z.nullable(z.number().int()),
    timeout_end: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    machine_id: z.nullable(z.string()),
    machine_version_id: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "session_id": "sessionId",
      "gpu_event_id": "gpuEventId",
      "created_at": "createdAt",
      "timeout_end": "timeoutEnd",
      "machine_id": "machineId",
      "machine_version_id": "machineVersionId",
    });
  });

/** @internal */
export type Session$Outbound = {
  session_id: string;
  gpu_event_id: string;
  url: string | null;
  gpu: string;
  created_at: string;
  timeout: number | null;
  timeout_end: string | null;
  machine_id: string | null;
  machine_version_id: string | null;
};

/** @internal */
export const Session$outboundSchema: z.ZodType<
  Session$Outbound,
  z.ZodTypeDef,
  Session
> = z.object({
  sessionId: z.string(),
  gpuEventId: z.string(),
  url: z.nullable(z.string()),
  gpu: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  timeout: z.nullable(z.number().int()),
  timeoutEnd: z.nullable(z.date().transform(v => v.toISOString())),
  machineId: z.nullable(z.string()),
  machineVersionId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    sessionId: "session_id",
    gpuEventId: "gpu_event_id",
    createdAt: "created_at",
    timeoutEnd: "timeout_end",
    machineId: "machine_id",
    machineVersionId: "machine_version_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Session$ {
  /** @deprecated use `Session$inboundSchema` instead. */
  export const inboundSchema = Session$inboundSchema;
  /** @deprecated use `Session$outboundSchema` instead. */
  export const outboundSchema = Session$outboundSchema;
  /** @deprecated use `Session$Outbound` instead. */
  export type Outbound = Session$Outbound;
}

export function sessionToJSON(session: Session): string {
  return JSON.stringify(Session$outboundSchema.parse(session));
}

export function sessionFromJSON(
  jsonString: string,
): SafeParseResult<Session, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Session$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Session' from JSON`,
  );
}

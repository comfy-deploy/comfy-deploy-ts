/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GetWorkflowVersionVersionIdRequest = {
  versionId: string;
};

/**
 * Retrieve the output
 */
export type GetWorkflowVersionVersionIdResponseBody = {
  workflowId: string;
  id: string;
  workflow?: any | undefined;
  workflowApi?: any | undefined;
  userId: string | null;
  comment: string | null;
  version: number;
  snapshot?: any | undefined;
  dependencies?: any | undefined;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const GetWorkflowVersionVersionIdRequest$inboundSchema: z.ZodType<
  GetWorkflowVersionVersionIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  version_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "version_id": "versionId",
  });
});

/** @internal */
export type GetWorkflowVersionVersionIdRequest$Outbound = {
  version_id: string;
};

/** @internal */
export const GetWorkflowVersionVersionIdRequest$outboundSchema: z.ZodType<
  GetWorkflowVersionVersionIdRequest$Outbound,
  z.ZodTypeDef,
  GetWorkflowVersionVersionIdRequest
> = z.object({
  versionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    versionId: "version_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowVersionVersionIdRequest$ {
  /** @deprecated use `GetWorkflowVersionVersionIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowVersionVersionIdRequest$inboundSchema;
  /** @deprecated use `GetWorkflowVersionVersionIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetWorkflowVersionVersionIdRequest$outboundSchema;
  /** @deprecated use `GetWorkflowVersionVersionIdRequest$Outbound` instead. */
  export type Outbound = GetWorkflowVersionVersionIdRequest$Outbound;
}

/** @internal */
export const GetWorkflowVersionVersionIdResponseBody$inboundSchema: z.ZodType<
  GetWorkflowVersionVersionIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflow_id: z.string(),
  id: z.string(),
  workflow: z.any().optional(),
  workflow_api: z.any().optional(),
  user_id: z.nullable(z.string()),
  comment: z.nullable(z.string()),
  version: z.number(),
  snapshot: z.any().optional(),
  dependencies: z.any().optional(),
  created_at: z.string(),
  updated_at: z.string(),
}).transform((v) => {
  return remap$(v, {
    "workflow_id": "workflowId",
    "workflow_api": "workflowApi",
    "user_id": "userId",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type GetWorkflowVersionVersionIdResponseBody$Outbound = {
  workflow_id: string;
  id: string;
  workflow?: any | undefined;
  workflow_api?: any | undefined;
  user_id: string | null;
  comment: string | null;
  version: number;
  snapshot?: any | undefined;
  dependencies?: any | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const GetWorkflowVersionVersionIdResponseBody$outboundSchema: z.ZodType<
  GetWorkflowVersionVersionIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetWorkflowVersionVersionIdResponseBody
> = z.object({
  workflowId: z.string(),
  id: z.string(),
  workflow: z.any().optional(),
  workflowApi: z.any().optional(),
  userId: z.nullable(z.string()),
  comment: z.nullable(z.string()),
  version: z.number(),
  snapshot: z.any().optional(),
  dependencies: z.any().optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
}).transform((v) => {
  return remap$(v, {
    workflowId: "workflow_id",
    workflowApi: "workflow_api",
    userId: "user_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowVersionVersionIdResponseBody$ {
  /** @deprecated use `GetWorkflowVersionVersionIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetWorkflowVersionVersionIdResponseBody$inboundSchema;
  /** @deprecated use `GetWorkflowVersionVersionIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetWorkflowVersionVersionIdResponseBody$outboundSchema;
  /** @deprecated use `GetWorkflowVersionVersionIdResponseBody$Outbound` instead. */
  export type Outbound = GetWorkflowVersionVersionIdResponseBody$Outbound;
}

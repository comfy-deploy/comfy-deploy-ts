/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SearchSearchModelGetRequest = {
  query: string;
  provider?: string | undefined;
};

/** @internal */
export const SearchSearchModelGetRequest$inboundSchema: z.ZodType<
  SearchSearchModelGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  provider: z.string().default("all"),
});

/** @internal */
export type SearchSearchModelGetRequest$Outbound = {
  query: string;
  provider: string;
};

/** @internal */
export const SearchSearchModelGetRequest$outboundSchema: z.ZodType<
  SearchSearchModelGetRequest$Outbound,
  z.ZodTypeDef,
  SearchSearchModelGetRequest
> = z.object({
  query: z.string(),
  provider: z.string().default("all"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSearchModelGetRequest$ {
  /** @deprecated use `SearchSearchModelGetRequest$inboundSchema` instead. */
  export const inboundSchema = SearchSearchModelGetRequest$inboundSchema;
  /** @deprecated use `SearchSearchModelGetRequest$outboundSchema` instead. */
  export const outboundSchema = SearchSearchModelGetRequest$outboundSchema;
  /** @deprecated use `SearchSearchModelGetRequest$Outbound` instead. */
  export type Outbound = SearchSearchModelGetRequest$Outbound;
}

export function searchSearchModelGetRequestToJSON(
  searchSearchModelGetRequest: SearchSearchModelGetRequest,
): string {
  return JSON.stringify(
    SearchSearchModelGetRequest$outboundSchema.parse(
      searchSearchModelGetRequest,
    ),
  );
}

export function searchSearchModelGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchSearchModelGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchSearchModelGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchSearchModelGetRequest' from JSON`,
  );
}

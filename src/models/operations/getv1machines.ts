/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export const Fields = {
  Full: "full",
  Minimal: "minimal",
} as const;
export type Fields = ClosedEnum<typeof Fields>;

export type GetV1MachinesRequest = {
  page?: string | undefined;
  pageSize?: string | undefined;
  fields?: Fields | undefined;
};

export type Machines = {
  id: string;
  name?: string | undefined;
  type?: string | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
  endpoints: Array<string>;
  objectInfo?: any | undefined;
};

/**
 * Machines retrieved successfully
 */
export type GetV1MachinesResponseBody = {
  machines: Array<Machines>;
  total: number;
};

/** @internal */
export const Fields$inboundSchema: z.ZodNativeEnum<typeof Fields> = z
  .nativeEnum(Fields);

/** @internal */
export const Fields$outboundSchema: z.ZodNativeEnum<typeof Fields> =
  Fields$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields$ {
  /** @deprecated use `Fields$inboundSchema` instead. */
  export const inboundSchema = Fields$inboundSchema;
  /** @deprecated use `Fields$outboundSchema` instead. */
  export const outboundSchema = Fields$outboundSchema;
}

/** @internal */
export const GetV1MachinesRequest$inboundSchema: z.ZodType<
  GetV1MachinesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.string().default("1"),
  pageSize: z.string().default("12"),
  fields: Fields$inboundSchema.default("minimal"),
});

/** @internal */
export type GetV1MachinesRequest$Outbound = {
  page: string;
  pageSize: string;
  fields: string;
};

/** @internal */
export const GetV1MachinesRequest$outboundSchema: z.ZodType<
  GetV1MachinesRequest$Outbound,
  z.ZodTypeDef,
  GetV1MachinesRequest
> = z.object({
  page: z.string().default("1"),
  pageSize: z.string().default("12"),
  fields: Fields$outboundSchema.default("minimal"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1MachinesRequest$ {
  /** @deprecated use `GetV1MachinesRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1MachinesRequest$inboundSchema;
  /** @deprecated use `GetV1MachinesRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1MachinesRequest$outboundSchema;
  /** @deprecated use `GetV1MachinesRequest$Outbound` instead. */
  export type Outbound = GetV1MachinesRequest$Outbound;
}

/** @internal */
export const Machines$inboundSchema: z.ZodType<
  Machines,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  type: z.string().optional(),
  status: z.string().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
  endpoints: z.array(z.string()),
  object_info: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "object_info": "objectInfo",
  });
});

/** @internal */
export type Machines$Outbound = {
  id: string;
  name?: string | undefined;
  type?: string | undefined;
  status?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  endpoints: Array<string>;
  object_info?: any | undefined;
};

/** @internal */
export const Machines$outboundSchema: z.ZodType<
  Machines$Outbound,
  z.ZodTypeDef,
  Machines
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  type: z.string().optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  endpoints: z.array(z.string()),
  objectInfo: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    objectInfo: "object_info",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Machines$ {
  /** @deprecated use `Machines$inboundSchema` instead. */
  export const inboundSchema = Machines$inboundSchema;
  /** @deprecated use `Machines$outboundSchema` instead. */
  export const outboundSchema = Machines$outboundSchema;
  /** @deprecated use `Machines$Outbound` instead. */
  export type Outbound = Machines$Outbound;
}

/** @internal */
export const GetV1MachinesResponseBody$inboundSchema: z.ZodType<
  GetV1MachinesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  machines: z.array(z.lazy(() => Machines$inboundSchema)),
  total: z.number(),
});

/** @internal */
export type GetV1MachinesResponseBody$Outbound = {
  machines: Array<Machines$Outbound>;
  total: number;
};

/** @internal */
export const GetV1MachinesResponseBody$outboundSchema: z.ZodType<
  GetV1MachinesResponseBody$Outbound,
  z.ZodTypeDef,
  GetV1MachinesResponseBody
> = z.object({
  machines: z.array(z.lazy(() => Machines$outboundSchema)),
  total: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1MachinesResponseBody$ {
  /** @deprecated use `GetV1MachinesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV1MachinesResponseBody$inboundSchema;
  /** @deprecated use `GetV1MachinesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetV1MachinesResponseBody$outboundSchema;
  /** @deprecated use `GetV1MachinesResponseBody$Outbound` instead. */
  export type Outbound = GetV1MachinesResponseBody$Outbound;
}

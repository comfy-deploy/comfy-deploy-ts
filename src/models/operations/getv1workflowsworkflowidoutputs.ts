/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const RunOrigin = {
    Manual: "manual",
    Api: "api",
    PublicShare: "public-share",
    PublicTemplate: "public-template",
    Workspace: "workspace",
} as const;
export type RunOrigin = ClosedEnum<typeof RunOrigin>;

export type GetV1WorkflowsWorkflowIdOutputsRequest = {
    workflowId: string;
    page?: string | undefined;
    pageSize?: string | undefined;
    search?: string | undefined;
    runOrigin?: RunOrigin | undefined;
};

export type Outputs = {
    fileURLs: Array<string>;
    runID: string;
    duration: number;
};

/**
 * Specific workflow retrieved successfully
 */
export type GetV1WorkflowsWorkflowIdOutputsResponseBody = {
    outputs: Array<Outputs>;
    total: number;
};

/** @internal */
export const RunOrigin$inboundSchema: z.ZodNativeEnum<typeof RunOrigin> = z.nativeEnum(RunOrigin);

/** @internal */
export const RunOrigin$outboundSchema: z.ZodNativeEnum<typeof RunOrigin> = RunOrigin$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunOrigin$ {
    /** @deprecated use `RunOrigin$inboundSchema` instead. */
    export const inboundSchema = RunOrigin$inboundSchema;
    /** @deprecated use `RunOrigin$outboundSchema` instead. */
    export const outboundSchema = RunOrigin$outboundSchema;
}

/** @internal */
export const GetV1WorkflowsWorkflowIdOutputsRequest$inboundSchema: z.ZodType<
    GetV1WorkflowsWorkflowIdOutputsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        workflow_id: z.string(),
        page: z.string().default("1"),
        pageSize: z.string().default("12"),
        search: z.string().optional(),
        runOrigin: RunOrigin$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_id: "workflowId",
        });
    });

/** @internal */
export type GetV1WorkflowsWorkflowIdOutputsRequest$Outbound = {
    workflow_id: string;
    page: string;
    pageSize: string;
    search?: string | undefined;
    runOrigin?: string | undefined;
};

/** @internal */
export const GetV1WorkflowsWorkflowIdOutputsRequest$outboundSchema: z.ZodType<
    GetV1WorkflowsWorkflowIdOutputsRequest$Outbound,
    z.ZodTypeDef,
    GetV1WorkflowsWorkflowIdOutputsRequest
> = z
    .object({
        workflowId: z.string(),
        page: z.string().default("1"),
        pageSize: z.string().default("12"),
        search: z.string().optional(),
        runOrigin: RunOrigin$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            workflowId: "workflow_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WorkflowsWorkflowIdOutputsRequest$ {
    /** @deprecated use `GetV1WorkflowsWorkflowIdOutputsRequest$inboundSchema` instead. */
    export const inboundSchema = GetV1WorkflowsWorkflowIdOutputsRequest$inboundSchema;
    /** @deprecated use `GetV1WorkflowsWorkflowIdOutputsRequest$outboundSchema` instead. */
    export const outboundSchema = GetV1WorkflowsWorkflowIdOutputsRequest$outboundSchema;
    /** @deprecated use `GetV1WorkflowsWorkflowIdOutputsRequest$Outbound` instead. */
    export type Outbound = GetV1WorkflowsWorkflowIdOutputsRequest$Outbound;
}

/** @internal */
export const Outputs$inboundSchema: z.ZodType<Outputs, z.ZodTypeDef, unknown> = z.object({
    fileURLs: z.array(z.string()),
    runID: z.string(),
    duration: z.number(),
});

/** @internal */
export type Outputs$Outbound = {
    fileURLs: Array<string>;
    runID: string;
    duration: number;
};

/** @internal */
export const Outputs$outboundSchema: z.ZodType<Outputs$Outbound, z.ZodTypeDef, Outputs> = z.object({
    fileURLs: z.array(z.string()),
    runID: z.string(),
    duration: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Outputs$ {
    /** @deprecated use `Outputs$inboundSchema` instead. */
    export const inboundSchema = Outputs$inboundSchema;
    /** @deprecated use `Outputs$outboundSchema` instead. */
    export const outboundSchema = Outputs$outboundSchema;
    /** @deprecated use `Outputs$Outbound` instead. */
    export type Outbound = Outputs$Outbound;
}

/** @internal */
export const GetV1WorkflowsWorkflowIdOutputsResponseBody$inboundSchema: z.ZodType<
    GetV1WorkflowsWorkflowIdOutputsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    outputs: z.array(z.lazy(() => Outputs$inboundSchema)),
    total: z.number(),
});

/** @internal */
export type GetV1WorkflowsWorkflowIdOutputsResponseBody$Outbound = {
    outputs: Array<Outputs$Outbound>;
    total: number;
};

/** @internal */
export const GetV1WorkflowsWorkflowIdOutputsResponseBody$outboundSchema: z.ZodType<
    GetV1WorkflowsWorkflowIdOutputsResponseBody$Outbound,
    z.ZodTypeDef,
    GetV1WorkflowsWorkflowIdOutputsResponseBody
> = z.object({
    outputs: z.array(z.lazy(() => Outputs$outboundSchema)),
    total: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WorkflowsWorkflowIdOutputsResponseBody$ {
    /** @deprecated use `GetV1WorkflowsWorkflowIdOutputsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetV1WorkflowsWorkflowIdOutputsResponseBody$inboundSchema;
    /** @deprecated use `GetV1WorkflowsWorkflowIdOutputsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetV1WorkflowsWorkflowIdOutputsResponseBody$outboundSchema;
    /** @deprecated use `GetV1WorkflowsWorkflowIdOutputsResponseBody$Outbound` instead. */
    export type Outbound = GetV1WorkflowsWorkflowIdOutputsResponseBody$Outbound;
}

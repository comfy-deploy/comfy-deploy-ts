/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateRunStreamRunStreamPostData =
  | components.DeploymentRunRequest
  | components.ModelRunRequest
  | components.WorkflowRunVersionRequest
  | components.WorkflowRunRequest;

/** @internal */
export const CreateRunStreamRunStreamPostData$inboundSchema: z.ZodType<
  CreateRunStreamRunStreamPostData,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.DeploymentRunRequest$inboundSchema,
  components.ModelRunRequest$inboundSchema,
  components.WorkflowRunVersionRequest$inboundSchema,
  components.WorkflowRunRequest$inboundSchema,
]);

/** @internal */
export type CreateRunStreamRunStreamPostData$Outbound =
  | components.DeploymentRunRequest$Outbound
  | components.ModelRunRequest$Outbound
  | components.WorkflowRunVersionRequest$Outbound
  | components.WorkflowRunRequest$Outbound;

/** @internal */
export const CreateRunStreamRunStreamPostData$outboundSchema: z.ZodType<
  CreateRunStreamRunStreamPostData$Outbound,
  z.ZodTypeDef,
  CreateRunStreamRunStreamPostData
> = z.union([
  components.DeploymentRunRequest$outboundSchema,
  components.ModelRunRequest$outboundSchema,
  components.WorkflowRunVersionRequest$outboundSchema,
  components.WorkflowRunRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunStreamRunStreamPostData$ {
  /** @deprecated use `CreateRunStreamRunStreamPostData$inboundSchema` instead. */
  export const inboundSchema = CreateRunStreamRunStreamPostData$inboundSchema;
  /** @deprecated use `CreateRunStreamRunStreamPostData$outboundSchema` instead. */
  export const outboundSchema = CreateRunStreamRunStreamPostData$outboundSchema;
  /** @deprecated use `CreateRunStreamRunStreamPostData$Outbound` instead. */
  export type Outbound = CreateRunStreamRunStreamPostData$Outbound;
}

export function createRunStreamRunStreamPostDataToJSON(
  createRunStreamRunStreamPostData: CreateRunStreamRunStreamPostData,
): string {
  return JSON.stringify(
    CreateRunStreamRunStreamPostData$outboundSchema.parse(
      createRunStreamRunStreamPostData,
    ),
  );
}

export function createRunStreamRunStreamPostDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunStreamRunStreamPostData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunStreamRunStreamPostData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunStreamRunStreamPostData' from JSON`,
  );
}

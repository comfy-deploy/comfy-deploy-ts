/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Type = {
    ImagePng: "image/png",
    ImageJpg: "image/jpg",
    ImageJpeg: "image/jpeg",
    ImageWebp: "image/webp",
    VideoMp4: "video/mp4",
    VideoWebm: "video/webm",
    ApplicationOctetStream: "application/octet-stream",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type GetApiUploadUrlRequest = {
    type: Type;
    fileSize: string;
};

/**
 * Retrieve the output
 */
export type GetApiUploadUrlResponseBody = {
    uploadUrl: string;
    fileId: string;
    downloadUrl: string;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const GetApiUploadUrlRequest$inboundSchema: z.ZodType<
    GetApiUploadUrlRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: Type$inboundSchema,
        file_size: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            file_size: "fileSize",
        });
    });

/** @internal */
export type GetApiUploadUrlRequest$Outbound = {
    type: string;
    file_size: string;
};

/** @internal */
export const GetApiUploadUrlRequest$outboundSchema: z.ZodType<
    GetApiUploadUrlRequest$Outbound,
    z.ZodTypeDef,
    GetApiUploadUrlRequest
> = z
    .object({
        type: Type$outboundSchema,
        fileSize: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            fileSize: "file_size",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUploadUrlRequest$ {
    /** @deprecated use `GetApiUploadUrlRequest$inboundSchema` instead. */
    export const inboundSchema = GetApiUploadUrlRequest$inboundSchema;
    /** @deprecated use `GetApiUploadUrlRequest$outboundSchema` instead. */
    export const outboundSchema = GetApiUploadUrlRequest$outboundSchema;
    /** @deprecated use `GetApiUploadUrlRequest$Outbound` instead. */
    export type Outbound = GetApiUploadUrlRequest$Outbound;
}

/** @internal */
export const GetApiUploadUrlResponseBody$inboundSchema: z.ZodType<
    GetApiUploadUrlResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        upload_url: z.string(),
        file_id: z.string(),
        download_url: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            upload_url: "uploadUrl",
            file_id: "fileId",
            download_url: "downloadUrl",
        });
    });

/** @internal */
export type GetApiUploadUrlResponseBody$Outbound = {
    upload_url: string;
    file_id: string;
    download_url: string;
};

/** @internal */
export const GetApiUploadUrlResponseBody$outboundSchema: z.ZodType<
    GetApiUploadUrlResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiUploadUrlResponseBody
> = z
    .object({
        uploadUrl: z.string(),
        fileId: z.string(),
        downloadUrl: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            uploadUrl: "upload_url",
            fileId: "file_id",
            downloadUrl: "download_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUploadUrlResponseBody$ {
    /** @deprecated use `GetApiUploadUrlResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetApiUploadUrlResponseBody$inboundSchema;
    /** @deprecated use `GetApiUploadUrlResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetApiUploadUrlResponseBody$outboundSchema;
    /** @deprecated use `GetApiUploadUrlResponseBody$Outbound` instead. */
    export type Outbound = GetApiUploadUrlResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetApiRunRequest = {
    runId: string;
};

export type WorkflowInputs = {};

export type GetApiRunWorkflowApi = {};

export const Origin = {
    Manual: "manual",
    Api: "api",
    PublicShare: "public-share",
    PublicTemplate: "public-template",
    Workspace: "workspace",
} as const;
export type Origin = ClosedEnum<typeof Origin>;

export const Status = {
    NotStarted: "not-started",
    Running: "running",
    Uploading: "uploading",
    Success: "success",
    Failed: "failed",
    Started: "started",
    Queued: "queued",
    Timeout: "timeout",
    Cancelled: "cancelled",
} as const;
export type Status = ClosedEnum<typeof Status>;

export const GetApiRunGpu = {
    T4: "T4",
    L4: "L4",
    A10G: "A10G",
    A100: "A100",
    H100: "H100",
} as const;
export type GetApiRunGpu = ClosedEnum<typeof GetApiRunGpu>;

export const MachineType = {
    Classic: "classic",
    RunpodServerless: "runpod-serverless",
    ModalServerless: "modal-serverless",
    ComfyDeployServerless: "comfy-deploy-serverless",
    Workspace: "workspace",
    WorkspaceV2: "workspace-v2",
} as const;
export type MachineType = ClosedEnum<typeof MachineType>;

export type RunLog = {};

export const WebhookStatus = {
    Success: "success",
    Failed: "failed",
    NotStarted: "not-started",
    Running: "running",
} as const;
export type WebhookStatus = ClosedEnum<typeof WebhookStatus>;

/**
 * Retrieve the output
 */
export type GetApiRunResponseBody = {
    id: string;
    workflowVersionId: string | null;
    workflowInputs: WorkflowInputs;
    workflowId: string | null;
    workflowApi: GetApiRunWorkflowApi;
    machineId: string | null;
    origin: Origin;
    status: Status;
    endedAt: string | null;
    createdAt: string;
    queuedAt: string | null;
    startedAt: string | null;
    gpu: GetApiRunGpu | null;
    machineVersion: string | null;
    machineType: MachineType | null;
    modalFunctionCallId: string | null;
    userId: string | null;
    orgId: string | null;
    runLog: RunLog;
    liveStatus: string | null;
    progress: number;
    isRealtime: boolean;
    webhook: string | null;
    webhookStatus: WebhookStatus | null;
};

/** @internal */
export const GetApiRunRequest$inboundSchema: z.ZodType<GetApiRunRequest, z.ZodTypeDef, unknown> = z
    .object({
        run_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            run_id: "runId",
        });
    });

/** @internal */
export type GetApiRunRequest$Outbound = {
    run_id: string;
};

/** @internal */
export const GetApiRunRequest$outboundSchema: z.ZodType<
    GetApiRunRequest$Outbound,
    z.ZodTypeDef,
    GetApiRunRequest
> = z
    .object({
        runId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            runId: "run_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiRunRequest$ {
    /** @deprecated use `GetApiRunRequest$inboundSchema` instead. */
    export const inboundSchema = GetApiRunRequest$inboundSchema;
    /** @deprecated use `GetApiRunRequest$outboundSchema` instead. */
    export const outboundSchema = GetApiRunRequest$outboundSchema;
    /** @deprecated use `GetApiRunRequest$Outbound` instead. */
    export type Outbound = GetApiRunRequest$Outbound;
}

/** @internal */
export const WorkflowInputs$inboundSchema: z.ZodType<WorkflowInputs, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type WorkflowInputs$Outbound = {};

/** @internal */
export const WorkflowInputs$outboundSchema: z.ZodType<
    WorkflowInputs$Outbound,
    z.ZodTypeDef,
    WorkflowInputs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowInputs$ {
    /** @deprecated use `WorkflowInputs$inboundSchema` instead. */
    export const inboundSchema = WorkflowInputs$inboundSchema;
    /** @deprecated use `WorkflowInputs$outboundSchema` instead. */
    export const outboundSchema = WorkflowInputs$outboundSchema;
    /** @deprecated use `WorkflowInputs$Outbound` instead. */
    export type Outbound = WorkflowInputs$Outbound;
}

/** @internal */
export const GetApiRunWorkflowApi$inboundSchema: z.ZodType<
    GetApiRunWorkflowApi,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type GetApiRunWorkflowApi$Outbound = {};

/** @internal */
export const GetApiRunWorkflowApi$outboundSchema: z.ZodType<
    GetApiRunWorkflowApi$Outbound,
    z.ZodTypeDef,
    GetApiRunWorkflowApi
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiRunWorkflowApi$ {
    /** @deprecated use `GetApiRunWorkflowApi$inboundSchema` instead. */
    export const inboundSchema = GetApiRunWorkflowApi$inboundSchema;
    /** @deprecated use `GetApiRunWorkflowApi$outboundSchema` instead. */
    export const outboundSchema = GetApiRunWorkflowApi$outboundSchema;
    /** @deprecated use `GetApiRunWorkflowApi$Outbound` instead. */
    export type Outbound = GetApiRunWorkflowApi$Outbound;
}

/** @internal */
export const Origin$inboundSchema: z.ZodNativeEnum<typeof Origin> = z.nativeEnum(Origin);

/** @internal */
export const Origin$outboundSchema: z.ZodNativeEnum<typeof Origin> = Origin$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Origin$ {
    /** @deprecated use `Origin$inboundSchema` instead. */
    export const inboundSchema = Origin$inboundSchema;
    /** @deprecated use `Origin$outboundSchema` instead. */
    export const outboundSchema = Origin$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> = Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    export const inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetApiRunGpu$inboundSchema: z.ZodNativeEnum<typeof GetApiRunGpu> =
    z.nativeEnum(GetApiRunGpu);

/** @internal */
export const GetApiRunGpu$outboundSchema: z.ZodNativeEnum<typeof GetApiRunGpu> =
    GetApiRunGpu$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiRunGpu$ {
    /** @deprecated use `GetApiRunGpu$inboundSchema` instead. */
    export const inboundSchema = GetApiRunGpu$inboundSchema;
    /** @deprecated use `GetApiRunGpu$outboundSchema` instead. */
    export const outboundSchema = GetApiRunGpu$outboundSchema;
}

/** @internal */
export const MachineType$inboundSchema: z.ZodNativeEnum<typeof MachineType> =
    z.nativeEnum(MachineType);

/** @internal */
export const MachineType$outboundSchema: z.ZodNativeEnum<typeof MachineType> =
    MachineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MachineType$ {
    /** @deprecated use `MachineType$inboundSchema` instead. */
    export const inboundSchema = MachineType$inboundSchema;
    /** @deprecated use `MachineType$outboundSchema` instead. */
    export const outboundSchema = MachineType$outboundSchema;
}

/** @internal */
export const RunLog$inboundSchema: z.ZodType<RunLog, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type RunLog$Outbound = {};

/** @internal */
export const RunLog$outboundSchema: z.ZodType<RunLog$Outbound, z.ZodTypeDef, RunLog> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunLog$ {
    /** @deprecated use `RunLog$inboundSchema` instead. */
    export const inboundSchema = RunLog$inboundSchema;
    /** @deprecated use `RunLog$outboundSchema` instead. */
    export const outboundSchema = RunLog$outboundSchema;
    /** @deprecated use `RunLog$Outbound` instead. */
    export type Outbound = RunLog$Outbound;
}

/** @internal */
export const WebhookStatus$inboundSchema: z.ZodNativeEnum<typeof WebhookStatus> =
    z.nativeEnum(WebhookStatus);

/** @internal */
export const WebhookStatus$outboundSchema: z.ZodNativeEnum<typeof WebhookStatus> =
    WebhookStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookStatus$ {
    /** @deprecated use `WebhookStatus$inboundSchema` instead. */
    export const inboundSchema = WebhookStatus$inboundSchema;
    /** @deprecated use `WebhookStatus$outboundSchema` instead. */
    export const outboundSchema = WebhookStatus$outboundSchema;
}

/** @internal */
export const GetApiRunResponseBody$inboundSchema: z.ZodType<
    GetApiRunResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        workflow_version_id: z.nullable(z.string()),
        workflow_inputs: z.lazy(() => WorkflowInputs$inboundSchema),
        workflow_id: z.nullable(z.string()),
        workflow_api: z.lazy(() => GetApiRunWorkflowApi$inboundSchema),
        machine_id: z.nullable(z.string()),
        origin: Origin$inboundSchema,
        status: Status$inboundSchema,
        ended_at: z.nullable(z.string()),
        created_at: z.string(),
        queued_at: z.nullable(z.string()),
        started_at: z.nullable(z.string()),
        gpu: z.nullable(GetApiRunGpu$inboundSchema),
        machine_version: z.nullable(z.string()),
        machine_type: z.nullable(MachineType$inboundSchema),
        modal_function_call_id: z.nullable(z.string()),
        user_id: z.nullable(z.string()),
        org_id: z.nullable(z.string()),
        run_log: z.lazy(() => RunLog$inboundSchema),
        live_status: z.nullable(z.string()),
        progress: z.number(),
        is_realtime: z.boolean(),
        webhook: z.nullable(z.string()),
        webhook_status: z.nullable(WebhookStatus$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_version_id: "workflowVersionId",
            workflow_inputs: "workflowInputs",
            workflow_id: "workflowId",
            workflow_api: "workflowApi",
            machine_id: "machineId",
            ended_at: "endedAt",
            created_at: "createdAt",
            queued_at: "queuedAt",
            started_at: "startedAt",
            machine_version: "machineVersion",
            machine_type: "machineType",
            modal_function_call_id: "modalFunctionCallId",
            user_id: "userId",
            org_id: "orgId",
            run_log: "runLog",
            live_status: "liveStatus",
            is_realtime: "isRealtime",
            webhook_status: "webhookStatus",
        });
    });

/** @internal */
export type GetApiRunResponseBody$Outbound = {
    id: string;
    workflow_version_id: string | null;
    workflow_inputs: WorkflowInputs$Outbound;
    workflow_id: string | null;
    workflow_api: GetApiRunWorkflowApi$Outbound;
    machine_id: string | null;
    origin: string;
    status: string;
    ended_at: string | null;
    created_at: string;
    queued_at: string | null;
    started_at: string | null;
    gpu: string | null;
    machine_version: string | null;
    machine_type: string | null;
    modal_function_call_id: string | null;
    user_id: string | null;
    org_id: string | null;
    run_log: RunLog$Outbound;
    live_status: string | null;
    progress: number;
    is_realtime: boolean;
    webhook: string | null;
    webhook_status: string | null;
};

/** @internal */
export const GetApiRunResponseBody$outboundSchema: z.ZodType<
    GetApiRunResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiRunResponseBody
> = z
    .object({
        id: z.string(),
        workflowVersionId: z.nullable(z.string()),
        workflowInputs: z.lazy(() => WorkflowInputs$outboundSchema),
        workflowId: z.nullable(z.string()),
        workflowApi: z.lazy(() => GetApiRunWorkflowApi$outboundSchema),
        machineId: z.nullable(z.string()),
        origin: Origin$outboundSchema,
        status: Status$outboundSchema,
        endedAt: z.nullable(z.string()),
        createdAt: z.string(),
        queuedAt: z.nullable(z.string()),
        startedAt: z.nullable(z.string()),
        gpu: z.nullable(GetApiRunGpu$outboundSchema),
        machineVersion: z.nullable(z.string()),
        machineType: z.nullable(MachineType$outboundSchema),
        modalFunctionCallId: z.nullable(z.string()),
        userId: z.nullable(z.string()),
        orgId: z.nullable(z.string()),
        runLog: z.lazy(() => RunLog$outboundSchema),
        liveStatus: z.nullable(z.string()),
        progress: z.number(),
        isRealtime: z.boolean(),
        webhook: z.nullable(z.string()),
        webhookStatus: z.nullable(WebhookStatus$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            workflowVersionId: "workflow_version_id",
            workflowInputs: "workflow_inputs",
            workflowId: "workflow_id",
            workflowApi: "workflow_api",
            machineId: "machine_id",
            endedAt: "ended_at",
            createdAt: "created_at",
            queuedAt: "queued_at",
            startedAt: "started_at",
            machineVersion: "machine_version",
            machineType: "machine_type",
            modalFunctionCallId: "modal_function_call_id",
            userId: "user_id",
            orgId: "org_id",
            runLog: "run_log",
            liveStatus: "live_status",
            isRealtime: "is_realtime",
            webhookStatus: "webhook_status",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiRunResponseBody$ {
    /** @deprecated use `GetApiRunResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetApiRunResponseBody$inboundSchema;
    /** @deprecated use `GetApiRunResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetApiRunResponseBody$outboundSchema;
    /** @deprecated use `GetApiRunResponseBody$Outbound` instead. */
    export type Outbound = GetApiRunResponseBody$Outbound;
}

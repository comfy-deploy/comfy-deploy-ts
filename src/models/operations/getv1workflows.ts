/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type GetV1WorkflowsRequest = {
    page?: string | undefined;
    pageSize?: string | undefined;
    search?: string | undefined;
};

export type User = {
    name: string;
};

export type Versions = {
    id: string;
    version: number;
};

export type GetV1WorkflowsResponseBody = {
    id: string;
    updatedAt: string;
    name: string;
    selectedMachineId: string | null;
    count: string;
    user: User;
    versions: Array<Versions>;
    deployments: Array<any>;
    runs: Array<any>;
};

/** @internal */
export const GetV1WorkflowsRequest$inboundSchema: z.ZodType<
    GetV1WorkflowsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    page: z.string().default("1"),
    pageSize: z.string().default("12"),
    search: z.string().optional(),
});

/** @internal */
export type GetV1WorkflowsRequest$Outbound = {
    page: string;
    pageSize: string;
    search?: string | undefined;
};

/** @internal */
export const GetV1WorkflowsRequest$outboundSchema: z.ZodType<
    GetV1WorkflowsRequest$Outbound,
    z.ZodTypeDef,
    GetV1WorkflowsRequest
> = z.object({
    page: z.string().default("1"),
    pageSize: z.string().default("12"),
    search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WorkflowsRequest$ {
    /** @deprecated use `GetV1WorkflowsRequest$inboundSchema` instead. */
    export const inboundSchema = GetV1WorkflowsRequest$inboundSchema;
    /** @deprecated use `GetV1WorkflowsRequest$outboundSchema` instead. */
    export const outboundSchema = GetV1WorkflowsRequest$outboundSchema;
    /** @deprecated use `GetV1WorkflowsRequest$Outbound` instead. */
    export type Outbound = GetV1WorkflowsRequest$Outbound;
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
});

/** @internal */
export type User$Outbound = {
    name: string;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> = z.object({
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
    /** @deprecated use `User$inboundSchema` instead. */
    export const inboundSchema = User$inboundSchema;
    /** @deprecated use `User$outboundSchema` instead. */
    export const outboundSchema = User$outboundSchema;
    /** @deprecated use `User$Outbound` instead. */
    export type Outbound = User$Outbound;
}

/** @internal */
export const Versions$inboundSchema: z.ZodType<Versions, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    version: z.number(),
});

/** @internal */
export type Versions$Outbound = {
    id: string;
    version: number;
};

/** @internal */
export const Versions$outboundSchema: z.ZodType<Versions$Outbound, z.ZodTypeDef, Versions> =
    z.object({
        id: z.string(),
        version: z.number(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Versions$ {
    /** @deprecated use `Versions$inboundSchema` instead. */
    export const inboundSchema = Versions$inboundSchema;
    /** @deprecated use `Versions$outboundSchema` instead. */
    export const outboundSchema = Versions$outboundSchema;
    /** @deprecated use `Versions$Outbound` instead. */
    export type Outbound = Versions$Outbound;
}

/** @internal */
export const GetV1WorkflowsResponseBody$inboundSchema: z.ZodType<
    GetV1WorkflowsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        updated_at: z.string(),
        name: z.string(),
        selected_machine_id: z.nullable(z.string()),
        count: z.string(),
        user: z.lazy(() => User$inboundSchema),
        versions: z.array(z.lazy(() => Versions$inboundSchema)),
        deployments: z.array(z.any()),
        runs: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            updated_at: "updatedAt",
            selected_machine_id: "selectedMachineId",
        });
    });

/** @internal */
export type GetV1WorkflowsResponseBody$Outbound = {
    id: string;
    updated_at: string;
    name: string;
    selected_machine_id: string | null;
    count: string;
    user: User$Outbound;
    versions: Array<Versions$Outbound>;
    deployments: Array<any>;
    runs: Array<any>;
};

/** @internal */
export const GetV1WorkflowsResponseBody$outboundSchema: z.ZodType<
    GetV1WorkflowsResponseBody$Outbound,
    z.ZodTypeDef,
    GetV1WorkflowsResponseBody
> = z
    .object({
        id: z.string(),
        updatedAt: z.string(),
        name: z.string(),
        selectedMachineId: z.nullable(z.string()),
        count: z.string(),
        user: z.lazy(() => User$outboundSchema),
        versions: z.array(z.lazy(() => Versions$outboundSchema)),
        deployments: z.array(z.any()),
        runs: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            updatedAt: "updated_at",
            selectedMachineId: "selected_machine_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WorkflowsResponseBody$ {
    /** @deprecated use `GetV1WorkflowsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetV1WorkflowsResponseBody$inboundSchema;
    /** @deprecated use `GetV1WorkflowsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetV1WorkflowsResponseBody$outboundSchema;
    /** @deprecated use `GetV1WorkflowsResponseBody$Outbound` instead. */
    export type Outbound = GetV1WorkflowsResponseBody$Outbound;
}

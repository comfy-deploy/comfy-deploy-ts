/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteSessionSessionSessionIdDeleteRequest = {
  sessionId: string;
  waitForShutdown?: boolean | undefined;
};

/** @internal */
export const DeleteSessionSessionSessionIdDeleteRequest$inboundSchema:
  z.ZodType<DeleteSessionSessionSessionIdDeleteRequest, z.ZodTypeDef, unknown> =
    z.object({
      session_id: z.string(),
      wait_for_shutdown: z.boolean().default(false),
    }).transform((v) => {
      return remap$(v, {
        "session_id": "sessionId",
        "wait_for_shutdown": "waitForShutdown",
      });
    });

/** @internal */
export type DeleteSessionSessionSessionIdDeleteRequest$Outbound = {
  session_id: string;
  wait_for_shutdown: boolean;
};

/** @internal */
export const DeleteSessionSessionSessionIdDeleteRequest$outboundSchema:
  z.ZodType<
    DeleteSessionSessionSessionIdDeleteRequest$Outbound,
    z.ZodTypeDef,
    DeleteSessionSessionSessionIdDeleteRequest
  > = z.object({
    sessionId: z.string(),
    waitForShutdown: z.boolean().default(false),
  }).transform((v) => {
    return remap$(v, {
      sessionId: "session_id",
      waitForShutdown: "wait_for_shutdown",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSessionSessionSessionIdDeleteRequest$ {
  /** @deprecated use `DeleteSessionSessionSessionIdDeleteRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteSessionSessionSessionIdDeleteRequest$inboundSchema;
  /** @deprecated use `DeleteSessionSessionSessionIdDeleteRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteSessionSessionSessionIdDeleteRequest$outboundSchema;
  /** @deprecated use `DeleteSessionSessionSessionIdDeleteRequest$Outbound` instead. */
  export type Outbound = DeleteSessionSessionSessionIdDeleteRequest$Outbound;
}

export function deleteSessionSessionSessionIdDeleteRequestToJSON(
  deleteSessionSessionSessionIdDeleteRequest:
    DeleteSessionSessionSessionIdDeleteRequest,
): string {
  return JSON.stringify(
    DeleteSessionSessionSessionIdDeleteRequest$outboundSchema.parse(
      deleteSessionSessionSessionIdDeleteRequest,
    ),
  );
}

export function deleteSessionSessionSessionIdDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteSessionSessionSessionIdDeleteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteSessionSessionSessionIdDeleteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteSessionSessionSessionIdDeleteRequest' from JSON`,
  );
}

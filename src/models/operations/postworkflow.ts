/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type WorkflowApi = {
    inputs: { [k: string]: any };
    classType?: string | undefined;
};

export type GitCustomNodes = {
    hash: string;
    disabled: boolean;
};

export type Snapshot = {
    comfyui: string;
    gitCustomNodes: { [k: string]: GitCustomNodes };
    fileCustomNodes: Array<any>;
};

export type Node = {
    inputs: { [k: string]: any };
    classType?: string | undefined;
};

export const One = {
    Copy: "copy",
    Unzip: "unzip",
    GitClone: "git-clone",
} as const;
export type One = ClosedEnum<typeof One>;

export type InstallType = One | string;

export type CustomNodes = {
    name: string;
    node?: Array<Node> | undefined;
    hash?: string | undefined;
    url: string;
    files?: Array<string> | undefined;
    installType?: One | string | undefined;
    warning?: string | undefined;
    pip?: Array<string> | undefined;
};

export type Models = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};

export type Files = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};

export type Dependencies = {
    comfyui: string;
    missingNodes: Array<string>;
    customNodes: { [k: string]: CustomNodes };
    models: { [k: string]: Array<Models> };
    files: { [k: string]: Array<Files> };
};

export type PostWorkflowRequestBody = {
    workflowId?: string | undefined;
    workflowName?: string | undefined;
    workflow?: any | null | undefined;
    workflowApi: { [k: string]: WorkflowApi };
    snapshot: Snapshot;
    dependencies?: Dependencies | undefined;
};

/**
 * Retrieve the output
 */
export type PostWorkflowResponseBody = {
    workflowId: string;
    version: string;
};

/** @internal */
export const WorkflowApi$inboundSchema: z.ZodType<WorkflowApi, z.ZodTypeDef, unknown> = z
    .object({
        inputs: z.record(z.any()),
        class_type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            class_type: "classType",
        });
    });

/** @internal */
export type WorkflowApi$Outbound = {
    inputs: { [k: string]: any };
    class_type?: string | undefined;
};

/** @internal */
export const WorkflowApi$outboundSchema: z.ZodType<
    WorkflowApi$Outbound,
    z.ZodTypeDef,
    WorkflowApi
> = z
    .object({
        inputs: z.record(z.any()),
        classType: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            classType: "class_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowApi$ {
    /** @deprecated use `WorkflowApi$inboundSchema` instead. */
    export const inboundSchema = WorkflowApi$inboundSchema;
    /** @deprecated use `WorkflowApi$outboundSchema` instead. */
    export const outboundSchema = WorkflowApi$outboundSchema;
    /** @deprecated use `WorkflowApi$Outbound` instead. */
    export type Outbound = WorkflowApi$Outbound;
}

/** @internal */
export const GitCustomNodes$inboundSchema: z.ZodType<GitCustomNodes, z.ZodTypeDef, unknown> =
    z.object({
        hash: z.string(),
        disabled: z.boolean(),
    });

/** @internal */
export type GitCustomNodes$Outbound = {
    hash: string;
    disabled: boolean;
};

/** @internal */
export const GitCustomNodes$outboundSchema: z.ZodType<
    GitCustomNodes$Outbound,
    z.ZodTypeDef,
    GitCustomNodes
> = z.object({
    hash: z.string(),
    disabled: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GitCustomNodes$ {
    /** @deprecated use `GitCustomNodes$inboundSchema` instead. */
    export const inboundSchema = GitCustomNodes$inboundSchema;
    /** @deprecated use `GitCustomNodes$outboundSchema` instead. */
    export const outboundSchema = GitCustomNodes$outboundSchema;
    /** @deprecated use `GitCustomNodes$Outbound` instead. */
    export type Outbound = GitCustomNodes$Outbound;
}

/** @internal */
export const Snapshot$inboundSchema: z.ZodType<Snapshot, z.ZodTypeDef, unknown> = z
    .object({
        comfyui: z.string(),
        git_custom_nodes: z.record(z.lazy(() => GitCustomNodes$inboundSchema)),
        file_custom_nodes: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            git_custom_nodes: "gitCustomNodes",
            file_custom_nodes: "fileCustomNodes",
        });
    });

/** @internal */
export type Snapshot$Outbound = {
    comfyui: string;
    git_custom_nodes: { [k: string]: GitCustomNodes$Outbound };
    file_custom_nodes: Array<any>;
};

/** @internal */
export const Snapshot$outboundSchema: z.ZodType<Snapshot$Outbound, z.ZodTypeDef, Snapshot> = z
    .object({
        comfyui: z.string(),
        gitCustomNodes: z.record(z.lazy(() => GitCustomNodes$outboundSchema)),
        fileCustomNodes: z.array(z.any()),
    })
    .transform((v) => {
        return remap$(v, {
            gitCustomNodes: "git_custom_nodes",
            fileCustomNodes: "file_custom_nodes",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Snapshot$ {
    /** @deprecated use `Snapshot$inboundSchema` instead. */
    export const inboundSchema = Snapshot$inboundSchema;
    /** @deprecated use `Snapshot$outboundSchema` instead. */
    export const outboundSchema = Snapshot$outboundSchema;
    /** @deprecated use `Snapshot$Outbound` instead. */
    export type Outbound = Snapshot$Outbound;
}

/** @internal */
export const Node$inboundSchema: z.ZodType<Node, z.ZodTypeDef, unknown> = z
    .object({
        inputs: z.record(z.any()),
        class_type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            class_type: "classType",
        });
    });

/** @internal */
export type Node$Outbound = {
    inputs: { [k: string]: any };
    class_type?: string | undefined;
};

/** @internal */
export const Node$outboundSchema: z.ZodType<Node$Outbound, z.ZodTypeDef, Node> = z
    .object({
        inputs: z.record(z.any()),
        classType: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            classType: "class_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Node$ {
    /** @deprecated use `Node$inboundSchema` instead. */
    export const inboundSchema = Node$inboundSchema;
    /** @deprecated use `Node$outboundSchema` instead. */
    export const outboundSchema = Node$outboundSchema;
    /** @deprecated use `Node$Outbound` instead. */
    export type Outbound = Node$Outbound;
}

/** @internal */
export const One$inboundSchema: z.ZodNativeEnum<typeof One> = z.nativeEnum(One);

/** @internal */
export const One$outboundSchema: z.ZodNativeEnum<typeof One> = One$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    export const inboundSchema = One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    export const outboundSchema = One$outboundSchema;
}

/** @internal */
export const InstallType$inboundSchema: z.ZodType<InstallType, z.ZodTypeDef, unknown> = z.union([
    One$inboundSchema,
    z.string(),
]);

/** @internal */
export type InstallType$Outbound = string | string;

/** @internal */
export const InstallType$outboundSchema: z.ZodType<
    InstallType$Outbound,
    z.ZodTypeDef,
    InstallType
> = z.union([One$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstallType$ {
    /** @deprecated use `InstallType$inboundSchema` instead. */
    export const inboundSchema = InstallType$inboundSchema;
    /** @deprecated use `InstallType$outboundSchema` instead. */
    export const outboundSchema = InstallType$outboundSchema;
    /** @deprecated use `InstallType$Outbound` instead. */
    export type Outbound = InstallType$Outbound;
}

/** @internal */
export const CustomNodes$inboundSchema: z.ZodType<CustomNodes, z.ZodTypeDef, unknown> = z
    .object({
        name: z.string(),
        node: z.array(z.lazy(() => Node$inboundSchema)).optional(),
        hash: z.string().optional(),
        url: z.string(),
        files: z.array(z.string()).optional(),
        install_type: z.union([One$inboundSchema, z.string()]).optional(),
        warning: z.string().optional(),
        pip: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            install_type: "installType",
        });
    });

/** @internal */
export type CustomNodes$Outbound = {
    name: string;
    node?: Array<Node$Outbound> | undefined;
    hash?: string | undefined;
    url: string;
    files?: Array<string> | undefined;
    install_type?: string | string | undefined;
    warning?: string | undefined;
    pip?: Array<string> | undefined;
};

/** @internal */
export const CustomNodes$outboundSchema: z.ZodType<
    CustomNodes$Outbound,
    z.ZodTypeDef,
    CustomNodes
> = z
    .object({
        name: z.string(),
        node: z.array(z.lazy(() => Node$outboundSchema)).optional(),
        hash: z.string().optional(),
        url: z.string(),
        files: z.array(z.string()).optional(),
        installType: z.union([One$outboundSchema, z.string()]).optional(),
        warning: z.string().optional(),
        pip: z.array(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            installType: "install_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomNodes$ {
    /** @deprecated use `CustomNodes$inboundSchema` instead. */
    export const inboundSchema = CustomNodes$inboundSchema;
    /** @deprecated use `CustomNodes$outboundSchema` instead. */
    export const outboundSchema = CustomNodes$outboundSchema;
    /** @deprecated use `CustomNodes$Outbound` instead. */
    export type Outbound = CustomNodes$Outbound;
}

/** @internal */
export const Models$inboundSchema: z.ZodType<Models, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});

/** @internal */
export type Models$Outbound = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};

/** @internal */
export const Models$outboundSchema: z.ZodType<Models$Outbound, z.ZodTypeDef, Models> = z.object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Models$ {
    /** @deprecated use `Models$inboundSchema` instead. */
    export const inboundSchema = Models$inboundSchema;
    /** @deprecated use `Models$outboundSchema` instead. */
    export const outboundSchema = Models$outboundSchema;
    /** @deprecated use `Models$Outbound` instead. */
    export type Outbound = Models$Outbound;
}

/** @internal */
export const Files$inboundSchema: z.ZodType<Files, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});

/** @internal */
export type Files$Outbound = {
    name: string;
    hash?: string | undefined;
    url?: string | undefined;
};

/** @internal */
export const Files$outboundSchema: z.ZodType<Files$Outbound, z.ZodTypeDef, Files> = z.object({
    name: z.string(),
    hash: z.string().optional(),
    url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Files$ {
    /** @deprecated use `Files$inboundSchema` instead. */
    export const inboundSchema = Files$inboundSchema;
    /** @deprecated use `Files$outboundSchema` instead. */
    export const outboundSchema = Files$outboundSchema;
    /** @deprecated use `Files$Outbound` instead. */
    export type Outbound = Files$Outbound;
}

/** @internal */
export const Dependencies$inboundSchema: z.ZodType<Dependencies, z.ZodTypeDef, unknown> = z
    .object({
        comfyui: z.string(),
        missing_nodes: z.array(z.string()),
        custom_nodes: z.record(z.lazy(() => CustomNodes$inboundSchema)),
        models: z.record(z.array(z.lazy(() => Models$inboundSchema))),
        files: z.record(z.array(z.lazy(() => Files$inboundSchema))),
    })
    .transform((v) => {
        return remap$(v, {
            missing_nodes: "missingNodes",
            custom_nodes: "customNodes",
        });
    });

/** @internal */
export type Dependencies$Outbound = {
    comfyui: string;
    missing_nodes: Array<string>;
    custom_nodes: { [k: string]: CustomNodes$Outbound };
    models: { [k: string]: Array<Models$Outbound> };
    files: { [k: string]: Array<Files$Outbound> };
};

/** @internal */
export const Dependencies$outboundSchema: z.ZodType<
    Dependencies$Outbound,
    z.ZodTypeDef,
    Dependencies
> = z
    .object({
        comfyui: z.string(),
        missingNodes: z.array(z.string()),
        customNodes: z.record(z.lazy(() => CustomNodes$outboundSchema)),
        models: z.record(z.array(z.lazy(() => Models$outboundSchema))),
        files: z.record(z.array(z.lazy(() => Files$outboundSchema))),
    })
    .transform((v) => {
        return remap$(v, {
            missingNodes: "missing_nodes",
            customNodes: "custom_nodes",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dependencies$ {
    /** @deprecated use `Dependencies$inboundSchema` instead. */
    export const inboundSchema = Dependencies$inboundSchema;
    /** @deprecated use `Dependencies$outboundSchema` instead. */
    export const outboundSchema = Dependencies$outboundSchema;
    /** @deprecated use `Dependencies$Outbound` instead. */
    export type Outbound = Dependencies$Outbound;
}

/** @internal */
export const PostWorkflowRequestBody$inboundSchema: z.ZodType<
    PostWorkflowRequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        workflow_id: z.string().optional(),
        workflow_name: z.string().optional(),
        workflow: z.nullable(z.any()).optional(),
        workflow_api: z.record(z.lazy(() => WorkflowApi$inboundSchema)),
        snapshot: z.lazy(() => Snapshot$inboundSchema),
        dependencies: z.lazy(() => Dependencies$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_id: "workflowId",
            workflow_name: "workflowName",
            workflow_api: "workflowApi",
        });
    });

/** @internal */
export type PostWorkflowRequestBody$Outbound = {
    workflow_id?: string | undefined;
    workflow_name?: string | undefined;
    workflow?: any | null | undefined;
    workflow_api: { [k: string]: WorkflowApi$Outbound };
    snapshot: Snapshot$Outbound;
    dependencies?: Dependencies$Outbound | undefined;
};

/** @internal */
export const PostWorkflowRequestBody$outboundSchema: z.ZodType<
    PostWorkflowRequestBody$Outbound,
    z.ZodTypeDef,
    PostWorkflowRequestBody
> = z
    .object({
        workflowId: z.string().optional(),
        workflowName: z.string().optional(),
        workflow: z.nullable(z.any()).optional(),
        workflowApi: z.record(z.lazy(() => WorkflowApi$outboundSchema)),
        snapshot: z.lazy(() => Snapshot$outboundSchema),
        dependencies: z.lazy(() => Dependencies$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            workflowId: "workflow_id",
            workflowName: "workflow_name",
            workflowApi: "workflow_api",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostWorkflowRequestBody$ {
    /** @deprecated use `PostWorkflowRequestBody$inboundSchema` instead. */
    export const inboundSchema = PostWorkflowRequestBody$inboundSchema;
    /** @deprecated use `PostWorkflowRequestBody$outboundSchema` instead. */
    export const outboundSchema = PostWorkflowRequestBody$outboundSchema;
    /** @deprecated use `PostWorkflowRequestBody$Outbound` instead. */
    export type Outbound = PostWorkflowRequestBody$Outbound;
}

/** @internal */
export const PostWorkflowResponseBody$inboundSchema: z.ZodType<
    PostWorkflowResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        workflow_id: z.string(),
        version: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_id: "workflowId",
        });
    });

/** @internal */
export type PostWorkflowResponseBody$Outbound = {
    workflow_id: string;
    version: string;
};

/** @internal */
export const PostWorkflowResponseBody$outboundSchema: z.ZodType<
    PostWorkflowResponseBody$Outbound,
    z.ZodTypeDef,
    PostWorkflowResponseBody
> = z
    .object({
        workflowId: z.string(),
        version: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflowId: "workflow_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostWorkflowResponseBody$ {
    /** @deprecated use `PostWorkflowResponseBody$inboundSchema` instead. */
    export const inboundSchema = PostWorkflowResponseBody$inboundSchema;
    /** @deprecated use `PostWorkflowResponseBody$outboundSchema` instead. */
    export const outboundSchema = PostWorkflowResponseBody$outboundSchema;
    /** @deprecated use `PostWorkflowResponseBody$Outbound` instead. */
    export type Outbound = PostWorkflowResponseBody$Outbound;
}

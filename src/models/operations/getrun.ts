/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

export type GetRunRequest = {
  runId: string;
};

export type WorkflowInputs = {};

export type GetRunWorkflowApi = {};

export const Origin = {
  Manual: "manual",
  Api: "api",
  PublicShare: "public-share",
  PublicTemplate: "public-template",
  Workspace: "workspace",
} as const;
export type Origin = ClosedEnum<typeof Origin>;

export const GetRunStatus = {
  NotStarted: "not-started",
  Running: "running",
  Uploading: "uploading",
  Success: "success",
  Failed: "failed",
  Started: "started",
  Queued: "queued",
  Timeout: "timeout",
  Cancelled: "cancelled",
} as const;
export type GetRunStatus = ClosedEnum<typeof GetRunStatus>;

export const GetRunGpu = {
  T4: "T4",
  L4: "L4",
  A10G: "A10G",
  A100: "A100",
  A10080Gb: "A100-80GB",
  H100: "H100",
} as const;
export type GetRunGpu = ClosedEnum<typeof GetRunGpu>;

export const MachineType = {
  Classic: "classic",
  RunpodServerless: "runpod-serverless",
  ModalServerless: "modal-serverless",
  ComfyDeployServerless: "comfy-deploy-serverless",
  Workspace: "workspace",
  WorkspaceV2: "workspace-v2",
} as const;
export type MachineType = ClosedEnum<typeof MachineType>;

export type RunLog = {};

export const WebhookStatus = {
  Success: "success",
  Failed: "failed",
  NotStarted: "not-started",
  Running: "running",
} as const;
export type WebhookStatus = ClosedEnum<typeof WebhookStatus>;

export type Images = {
  url: string;
  filename: string;
};

export type GetRunFiles = {
  url: string;
  filename: string;
};

export type Gifs = {
  url: string;
  filename: string;
};

export type Data = {
  images?: Array<Images> | undefined;
  files?: Array<GetRunFiles> | undefined;
  gifs?: Array<Gifs> | undefined;
  text?: Array<string> | undefined;
};

export type Outputs = {
  data: Data;
};

/**
 * Retrieve the output
 */
export type GetRunResponseBody = {
  id: string;
  workflowVersionId: string | null;
  workflowInputs: WorkflowInputs | null;
  workflowId: string | null;
  workflowApi?: GetRunWorkflowApi | null | undefined;
  machineId: string | null;
  origin: Origin;
  status: GetRunStatus;
  endedAt: string | null;
  createdAt: string;
  updatedAt: string;
  queuedAt: string | null;
  startedAt: string | null;
  gpuEventId: string | null;
  gpu: GetRunGpu | null;
  machineVersion: string | null;
  machineType: MachineType | null;
  modalFunctionCallId: string | null;
  userId: string | null;
  orgId: string | null;
  runLog?: RunLog | undefined;
  liveStatus: string | null;
  progress: number;
  isRealtime: boolean;
  webhook: string | null;
  webhookStatus: WebhookStatus | null;
  webhookIntermediateStatus: boolean;
  batchId: string | null;
  favorite: boolean;
  outputs?: Array<Outputs> | null | undefined;
};

/** @internal */
export const GetRunRequest$inboundSchema: z.ZodType<
  GetRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  run_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "run_id": "runId",
  });
});

/** @internal */
export type GetRunRequest$Outbound = {
  run_id: string;
};

/** @internal */
export const GetRunRequest$outboundSchema: z.ZodType<
  GetRunRequest$Outbound,
  z.ZodTypeDef,
  GetRunRequest
> = z.object({
  runId: z.string(),
}).transform((v) => {
  return remap$(v, {
    runId: "run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunRequest$ {
  /** @deprecated use `GetRunRequest$inboundSchema` instead. */
  export const inboundSchema = GetRunRequest$inboundSchema;
  /** @deprecated use `GetRunRequest$outboundSchema` instead. */
  export const outboundSchema = GetRunRequest$outboundSchema;
  /** @deprecated use `GetRunRequest$Outbound` instead. */
  export type Outbound = GetRunRequest$Outbound;
}

/** @internal */
export const WorkflowInputs$inboundSchema: z.ZodType<
  WorkflowInputs,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WorkflowInputs$Outbound = {};

/** @internal */
export const WorkflowInputs$outboundSchema: z.ZodType<
  WorkflowInputs$Outbound,
  z.ZodTypeDef,
  WorkflowInputs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowInputs$ {
  /** @deprecated use `WorkflowInputs$inboundSchema` instead. */
  export const inboundSchema = WorkflowInputs$inboundSchema;
  /** @deprecated use `WorkflowInputs$outboundSchema` instead. */
  export const outboundSchema = WorkflowInputs$outboundSchema;
  /** @deprecated use `WorkflowInputs$Outbound` instead. */
  export type Outbound = WorkflowInputs$Outbound;
}

/** @internal */
export const GetRunWorkflowApi$inboundSchema: z.ZodType<
  GetRunWorkflowApi,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetRunWorkflowApi$Outbound = {};

/** @internal */
export const GetRunWorkflowApi$outboundSchema: z.ZodType<
  GetRunWorkflowApi$Outbound,
  z.ZodTypeDef,
  GetRunWorkflowApi
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunWorkflowApi$ {
  /** @deprecated use `GetRunWorkflowApi$inboundSchema` instead. */
  export const inboundSchema = GetRunWorkflowApi$inboundSchema;
  /** @deprecated use `GetRunWorkflowApi$outboundSchema` instead. */
  export const outboundSchema = GetRunWorkflowApi$outboundSchema;
  /** @deprecated use `GetRunWorkflowApi$Outbound` instead. */
  export type Outbound = GetRunWorkflowApi$Outbound;
}

/** @internal */
export const Origin$inboundSchema: z.ZodNativeEnum<typeof Origin> = z
  .nativeEnum(Origin);

/** @internal */
export const Origin$outboundSchema: z.ZodNativeEnum<typeof Origin> =
  Origin$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Origin$ {
  /** @deprecated use `Origin$inboundSchema` instead. */
  export const inboundSchema = Origin$inboundSchema;
  /** @deprecated use `Origin$outboundSchema` instead. */
  export const outboundSchema = Origin$outboundSchema;
}

/** @internal */
export const GetRunStatus$inboundSchema: z.ZodNativeEnum<typeof GetRunStatus> =
  z.nativeEnum(GetRunStatus);

/** @internal */
export const GetRunStatus$outboundSchema: z.ZodNativeEnum<typeof GetRunStatus> =
  GetRunStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunStatus$ {
  /** @deprecated use `GetRunStatus$inboundSchema` instead. */
  export const inboundSchema = GetRunStatus$inboundSchema;
  /** @deprecated use `GetRunStatus$outboundSchema` instead. */
  export const outboundSchema = GetRunStatus$outboundSchema;
}

/** @internal */
export const GetRunGpu$inboundSchema: z.ZodNativeEnum<typeof GetRunGpu> = z
  .nativeEnum(GetRunGpu);

/** @internal */
export const GetRunGpu$outboundSchema: z.ZodNativeEnum<typeof GetRunGpu> =
  GetRunGpu$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunGpu$ {
  /** @deprecated use `GetRunGpu$inboundSchema` instead. */
  export const inboundSchema = GetRunGpu$inboundSchema;
  /** @deprecated use `GetRunGpu$outboundSchema` instead. */
  export const outboundSchema = GetRunGpu$outboundSchema;
}

/** @internal */
export const MachineType$inboundSchema: z.ZodNativeEnum<typeof MachineType> = z
  .nativeEnum(MachineType);

/** @internal */
export const MachineType$outboundSchema: z.ZodNativeEnum<typeof MachineType> =
  MachineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MachineType$ {
  /** @deprecated use `MachineType$inboundSchema` instead. */
  export const inboundSchema = MachineType$inboundSchema;
  /** @deprecated use `MachineType$outboundSchema` instead. */
  export const outboundSchema = MachineType$outboundSchema;
}

/** @internal */
export const RunLog$inboundSchema: z.ZodType<RunLog, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type RunLog$Outbound = {};

/** @internal */
export const RunLog$outboundSchema: z.ZodType<
  RunLog$Outbound,
  z.ZodTypeDef,
  RunLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunLog$ {
  /** @deprecated use `RunLog$inboundSchema` instead. */
  export const inboundSchema = RunLog$inboundSchema;
  /** @deprecated use `RunLog$outboundSchema` instead. */
  export const outboundSchema = RunLog$outboundSchema;
  /** @deprecated use `RunLog$Outbound` instead. */
  export type Outbound = RunLog$Outbound;
}

/** @internal */
export const WebhookStatus$inboundSchema: z.ZodNativeEnum<
  typeof WebhookStatus
> = z.nativeEnum(WebhookStatus);

/** @internal */
export const WebhookStatus$outboundSchema: z.ZodNativeEnum<
  typeof WebhookStatus
> = WebhookStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookStatus$ {
  /** @deprecated use `WebhookStatus$inboundSchema` instead. */
  export const inboundSchema = WebhookStatus$inboundSchema;
  /** @deprecated use `WebhookStatus$outboundSchema` instead. */
  export const outboundSchema = WebhookStatus$outboundSchema;
}

/** @internal */
export const Images$inboundSchema: z.ZodType<Images, z.ZodTypeDef, unknown> = z
  .object({
    url: z.string(),
    filename: z.string(),
  });

/** @internal */
export type Images$Outbound = {
  url: string;
  filename: string;
};

/** @internal */
export const Images$outboundSchema: z.ZodType<
  Images$Outbound,
  z.ZodTypeDef,
  Images
> = z.object({
  url: z.string(),
  filename: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Images$ {
  /** @deprecated use `Images$inboundSchema` instead. */
  export const inboundSchema = Images$inboundSchema;
  /** @deprecated use `Images$outboundSchema` instead. */
  export const outboundSchema = Images$outboundSchema;
  /** @deprecated use `Images$Outbound` instead. */
  export type Outbound = Images$Outbound;
}

/** @internal */
export const GetRunFiles$inboundSchema: z.ZodType<
  GetRunFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  filename: z.string(),
});

/** @internal */
export type GetRunFiles$Outbound = {
  url: string;
  filename: string;
};

/** @internal */
export const GetRunFiles$outboundSchema: z.ZodType<
  GetRunFiles$Outbound,
  z.ZodTypeDef,
  GetRunFiles
> = z.object({
  url: z.string(),
  filename: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunFiles$ {
  /** @deprecated use `GetRunFiles$inboundSchema` instead. */
  export const inboundSchema = GetRunFiles$inboundSchema;
  /** @deprecated use `GetRunFiles$outboundSchema` instead. */
  export const outboundSchema = GetRunFiles$outboundSchema;
  /** @deprecated use `GetRunFiles$Outbound` instead. */
  export type Outbound = GetRunFiles$Outbound;
}

/** @internal */
export const Gifs$inboundSchema: z.ZodType<Gifs, z.ZodTypeDef, unknown> = z
  .object({
    url: z.string(),
    filename: z.string(),
  });

/** @internal */
export type Gifs$Outbound = {
  url: string;
  filename: string;
};

/** @internal */
export const Gifs$outboundSchema: z.ZodType<Gifs$Outbound, z.ZodTypeDef, Gifs> =
  z.object({
    url: z.string(),
    filename: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gifs$ {
  /** @deprecated use `Gifs$inboundSchema` instead. */
  export const inboundSchema = Gifs$inboundSchema;
  /** @deprecated use `Gifs$outboundSchema` instead. */
  export const outboundSchema = Gifs$outboundSchema;
  /** @deprecated use `Gifs$Outbound` instead. */
  export type Outbound = Gifs$Outbound;
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    images: z.array(z.lazy(() => Images$inboundSchema)).optional(),
    files: z.array(z.lazy(() => GetRunFiles$inboundSchema)).optional(),
    gifs: z.array(z.lazy(() => Gifs$inboundSchema)).optional(),
    text: z.array(z.string()).optional(),
  });

/** @internal */
export type Data$Outbound = {
  images?: Array<Images$Outbound> | undefined;
  files?: Array<GetRunFiles$Outbound> | undefined;
  gifs?: Array<Gifs$Outbound> | undefined;
  text?: Array<string> | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    images: z.array(z.lazy(() => Images$outboundSchema)).optional(),
    files: z.array(z.lazy(() => GetRunFiles$outboundSchema)).optional(),
    gifs: z.array(z.lazy(() => Gifs$outboundSchema)).optional(),
    text: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

/** @internal */
export const Outputs$inboundSchema: z.ZodType<Outputs, z.ZodTypeDef, unknown> =
  z.object({
    data: z.lazy(() => Data$inboundSchema),
  });

/** @internal */
export type Outputs$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const Outputs$outboundSchema: z.ZodType<
  Outputs$Outbound,
  z.ZodTypeDef,
  Outputs
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Outputs$ {
  /** @deprecated use `Outputs$inboundSchema` instead. */
  export const inboundSchema = Outputs$inboundSchema;
  /** @deprecated use `Outputs$outboundSchema` instead. */
  export const outboundSchema = Outputs$outboundSchema;
  /** @deprecated use `Outputs$Outbound` instead. */
  export type Outbound = Outputs$Outbound;
}

/** @internal */
export const GetRunResponseBody$inboundSchema: z.ZodType<
  GetRunResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  workflow_version_id: z.nullable(z.string()),
  workflow_inputs: z.nullable(z.lazy(() => WorkflowInputs$inboundSchema)),
  workflow_id: z.nullable(z.string()),
  workflow_api: z.nullable(z.lazy(() => GetRunWorkflowApi$inboundSchema))
    .optional(),
  machine_id: z.nullable(z.string()),
  origin: Origin$inboundSchema,
  status: GetRunStatus$inboundSchema,
  ended_at: z.nullable(z.string()),
  created_at: z.string(),
  updated_at: z.string(),
  queued_at: z.nullable(z.string()),
  started_at: z.nullable(z.string()),
  gpu_event_id: z.nullable(z.string()),
  gpu: z.nullable(GetRunGpu$inboundSchema),
  machine_version: z.nullable(z.string()),
  machine_type: z.nullable(MachineType$inboundSchema),
  modal_function_call_id: z.nullable(z.string()),
  user_id: z.nullable(z.string()),
  org_id: z.nullable(z.string()),
  run_log: z.lazy(() => RunLog$inboundSchema).optional(),
  live_status: z.nullable(z.string()),
  progress: z.number(),
  is_realtime: z.boolean(),
  webhook: z.nullable(z.string()),
  webhook_status: z.nullable(WebhookStatus$inboundSchema),
  webhook_intermediate_status: z.boolean(),
  batch_id: z.nullable(z.string()),
  favorite: z.boolean(),
  outputs: z.nullable(z.array(z.lazy(() => Outputs$inboundSchema))).optional(),
}).transform((v) => {
  return remap$(v, {
    "workflow_version_id": "workflowVersionId",
    "workflow_inputs": "workflowInputs",
    "workflow_id": "workflowId",
    "workflow_api": "workflowApi",
    "machine_id": "machineId",
    "ended_at": "endedAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
    "queued_at": "queuedAt",
    "started_at": "startedAt",
    "gpu_event_id": "gpuEventId",
    "machine_version": "machineVersion",
    "machine_type": "machineType",
    "modal_function_call_id": "modalFunctionCallId",
    "user_id": "userId",
    "org_id": "orgId",
    "run_log": "runLog",
    "live_status": "liveStatus",
    "is_realtime": "isRealtime",
    "webhook_status": "webhookStatus",
    "webhook_intermediate_status": "webhookIntermediateStatus",
    "batch_id": "batchId",
  });
});

/** @internal */
export type GetRunResponseBody$Outbound = {
  id: string;
  workflow_version_id: string | null;
  workflow_inputs: WorkflowInputs$Outbound | null;
  workflow_id: string | null;
  workflow_api?: GetRunWorkflowApi$Outbound | null | undefined;
  machine_id: string | null;
  origin: string;
  status: string;
  ended_at: string | null;
  created_at: string;
  updated_at: string;
  queued_at: string | null;
  started_at: string | null;
  gpu_event_id: string | null;
  gpu: string | null;
  machine_version: string | null;
  machine_type: string | null;
  modal_function_call_id: string | null;
  user_id: string | null;
  org_id: string | null;
  run_log?: RunLog$Outbound | undefined;
  live_status: string | null;
  progress: number;
  is_realtime: boolean;
  webhook: string | null;
  webhook_status: string | null;
  webhook_intermediate_status: boolean;
  batch_id: string | null;
  favorite: boolean;
  outputs?: Array<Outputs$Outbound> | null | undefined;
};

/** @internal */
export const GetRunResponseBody$outboundSchema: z.ZodType<
  GetRunResponseBody$Outbound,
  z.ZodTypeDef,
  GetRunResponseBody
> = z.object({
  id: z.string(),
  workflowVersionId: z.nullable(z.string()),
  workflowInputs: z.nullable(z.lazy(() => WorkflowInputs$outboundSchema)),
  workflowId: z.nullable(z.string()),
  workflowApi: z.nullable(z.lazy(() => GetRunWorkflowApi$outboundSchema))
    .optional(),
  machineId: z.nullable(z.string()),
  origin: Origin$outboundSchema,
  status: GetRunStatus$outboundSchema,
  endedAt: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  queuedAt: z.nullable(z.string()),
  startedAt: z.nullable(z.string()),
  gpuEventId: z.nullable(z.string()),
  gpu: z.nullable(GetRunGpu$outboundSchema),
  machineVersion: z.nullable(z.string()),
  machineType: z.nullable(MachineType$outboundSchema),
  modalFunctionCallId: z.nullable(z.string()),
  userId: z.nullable(z.string()),
  orgId: z.nullable(z.string()),
  runLog: z.lazy(() => RunLog$outboundSchema).optional(),
  liveStatus: z.nullable(z.string()),
  progress: z.number(),
  isRealtime: z.boolean(),
  webhook: z.nullable(z.string()),
  webhookStatus: z.nullable(WebhookStatus$outboundSchema),
  webhookIntermediateStatus: z.boolean(),
  batchId: z.nullable(z.string()),
  favorite: z.boolean(),
  outputs: z.nullable(z.array(z.lazy(() => Outputs$outboundSchema))).optional(),
}).transform((v) => {
  return remap$(v, {
    workflowVersionId: "workflow_version_id",
    workflowInputs: "workflow_inputs",
    workflowId: "workflow_id",
    workflowApi: "workflow_api",
    machineId: "machine_id",
    endedAt: "ended_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
    queuedAt: "queued_at",
    startedAt: "started_at",
    gpuEventId: "gpu_event_id",
    machineVersion: "machine_version",
    machineType: "machine_type",
    modalFunctionCallId: "modal_function_call_id",
    userId: "user_id",
    orgId: "org_id",
    runLog: "run_log",
    liveStatus: "live_status",
    isRealtime: "is_realtime",
    webhookStatus: "webhook_status",
    webhookIntermediateStatus: "webhook_intermediate_status",
    batchId: "batch_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunResponseBody$ {
  /** @deprecated use `GetRunResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetRunResponseBody$inboundSchema;
  /** @deprecated use `GetRunResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetRunResponseBody$outboundSchema;
  /** @deprecated use `GetRunResponseBody$Outbound` instead. */
  export type Outbound = GetRunResponseBody$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Gpu = {
    T4: "T4",
    L4: "L4",
    A10G: "A10G",
    A100: "A100",
    H100: "H100",
} as const;
export type Gpu = ClosedEnum<typeof Gpu>;

export const RequestBodyRunOrigin = {
    Manual: "manual",
    Api: "api",
    PublicShare: "public-share",
    PublicTemplate: "public-template",
    Workspace: "workspace",
} as const;
export type RequestBodyRunOrigin = ClosedEnum<typeof RequestBodyRunOrigin>;

export type RequestBodyInputs = string | number;

export type Two = {
    workflowApi?: any | null | undefined;
    workflowId: string;
    machineId?: string | undefined;
    gpu?: Gpu | undefined;
    concurrencyLimit?: number | undefined;
    privateVolumeName?: string | undefined;
    timeout?: number | undefined;
    runOrigin?: RequestBodyRunOrigin | undefined;
    /**
     * External inputs to the workflow
     */
    inputs?: { [k: string]: string | number } | undefined;
    /**
     * Webhook URL to receive workflow updates
     */
    webhook?: string | undefined;
    /**
     * Whether to return a streaming url
     */
    stream?: boolean | undefined;
};

export type Inputs = string | number;

export type RequestBody1 = {
    deploymentId: string;
    /**
     * External inputs to the workflow
     */
    inputs?: { [k: string]: string | number } | undefined;
    /**
     * Webhook URL to receive workflow updates
     */
    webhook?: string | undefined;
    /**
     * Whether to return a streaming url
     */
    stream?: boolean | undefined;
};

export type PostRunRequestBody = RequestBody1 | Two;

/**
 * Workflow queued
 */
export type PostRunResponseBody = {
    runId: string;
};

/** @internal */
export const Gpu$inboundSchema: z.ZodNativeEnum<typeof Gpu> = z.nativeEnum(Gpu);

/** @internal */
export const Gpu$outboundSchema: z.ZodNativeEnum<typeof Gpu> = Gpu$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Gpu$ {
    /** @deprecated use `Gpu$inboundSchema` instead. */
    export const inboundSchema = Gpu$inboundSchema;
    /** @deprecated use `Gpu$outboundSchema` instead. */
    export const outboundSchema = Gpu$outboundSchema;
}

/** @internal */
export const RequestBodyRunOrigin$inboundSchema: z.ZodNativeEnum<typeof RequestBodyRunOrigin> =
    z.nativeEnum(RequestBodyRunOrigin);

/** @internal */
export const RequestBodyRunOrigin$outboundSchema: z.ZodNativeEnum<typeof RequestBodyRunOrigin> =
    RequestBodyRunOrigin$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyRunOrigin$ {
    /** @deprecated use `RequestBodyRunOrigin$inboundSchema` instead. */
    export const inboundSchema = RequestBodyRunOrigin$inboundSchema;
    /** @deprecated use `RequestBodyRunOrigin$outboundSchema` instead. */
    export const outboundSchema = RequestBodyRunOrigin$outboundSchema;
}

/** @internal */
export const RequestBodyInputs$inboundSchema: z.ZodType<RequestBodyInputs, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.number()]);

/** @internal */
export type RequestBodyInputs$Outbound = string | number;

/** @internal */
export const RequestBodyInputs$outboundSchema: z.ZodType<
    RequestBodyInputs$Outbound,
    z.ZodTypeDef,
    RequestBodyInputs
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyInputs$ {
    /** @deprecated use `RequestBodyInputs$inboundSchema` instead. */
    export const inboundSchema = RequestBodyInputs$inboundSchema;
    /** @deprecated use `RequestBodyInputs$outboundSchema` instead. */
    export const outboundSchema = RequestBodyInputs$outboundSchema;
    /** @deprecated use `RequestBodyInputs$Outbound` instead. */
    export type Outbound = RequestBodyInputs$Outbound;
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
    .object({
        workflow_api: z.nullable(z.any()).optional(),
        workflow_id: z.string(),
        machine_id: z.string().optional(),
        gpu: Gpu$inboundSchema.optional(),
        concurrency_limit: z.number().optional(),
        private_volume_name: z.string().optional(),
        timeout: z.number().optional(),
        run_origin: RequestBodyRunOrigin$inboundSchema.optional(),
        inputs: z.record(z.union([z.string(), z.number()])).optional(),
        webhook: z.string().optional(),
        stream: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_api: "workflowApi",
            workflow_id: "workflowId",
            machine_id: "machineId",
            concurrency_limit: "concurrencyLimit",
            private_volume_name: "privateVolumeName",
            run_origin: "runOrigin",
        });
    });

/** @internal */
export type Two$Outbound = {
    workflow_api?: any | null | undefined;
    workflow_id: string;
    machine_id?: string | undefined;
    gpu?: string | undefined;
    concurrency_limit?: number | undefined;
    private_volume_name?: string | undefined;
    timeout?: number | undefined;
    run_origin?: string | undefined;
    inputs?: { [k: string]: string | number } | undefined;
    webhook?: string | undefined;
    stream?: boolean | undefined;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
    .object({
        workflowApi: z.nullable(z.any()).optional(),
        workflowId: z.string(),
        machineId: z.string().optional(),
        gpu: Gpu$outboundSchema.optional(),
        concurrencyLimit: z.number().optional(),
        privateVolumeName: z.string().optional(),
        timeout: z.number().optional(),
        runOrigin: RequestBodyRunOrigin$outboundSchema.optional(),
        inputs: z.record(z.union([z.string(), z.number()])).optional(),
        webhook: z.string().optional(),
        stream: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            workflowApi: "workflow_api",
            workflowId: "workflow_id",
            machineId: "machine_id",
            concurrencyLimit: "concurrency_limit",
            privateVolumeName: "private_volume_name",
            runOrigin: "run_origin",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    export const inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    export const outboundSchema = Two$outboundSchema;
    /** @deprecated use `Two$Outbound` instead. */
    export type Outbound = Two$Outbound;
}

/** @internal */
export const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    z.number(),
]);

/** @internal */
export type Inputs$Outbound = string | number;

/** @internal */
export const Inputs$outboundSchema: z.ZodType<Inputs$Outbound, z.ZodTypeDef, Inputs> = z.union([
    z.string(),
    z.number(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Inputs$ {
    /** @deprecated use `Inputs$inboundSchema` instead. */
    export const inboundSchema = Inputs$inboundSchema;
    /** @deprecated use `Inputs$outboundSchema` instead. */
    export const outboundSchema = Inputs$outboundSchema;
    /** @deprecated use `Inputs$Outbound` instead. */
    export type Outbound = Inputs$Outbound;
}

/** @internal */
export const RequestBody1$inboundSchema: z.ZodType<RequestBody1, z.ZodTypeDef, unknown> = z
    .object({
        deployment_id: z.string(),
        inputs: z.record(z.union([z.string(), z.number()])).optional(),
        webhook: z.string().optional(),
        stream: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            deployment_id: "deploymentId",
        });
    });

/** @internal */
export type RequestBody1$Outbound = {
    deployment_id: string;
    inputs?: { [k: string]: string | number } | undefined;
    webhook?: string | undefined;
    stream?: boolean | undefined;
};

/** @internal */
export const RequestBody1$outboundSchema: z.ZodType<
    RequestBody1$Outbound,
    z.ZodTypeDef,
    RequestBody1
> = z
    .object({
        deploymentId: z.string(),
        inputs: z.record(z.union([z.string(), z.number()])).optional(),
        webhook: z.string().optional(),
        stream: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            deploymentId: "deployment_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody1$ {
    /** @deprecated use `RequestBody1$inboundSchema` instead. */
    export const inboundSchema = RequestBody1$inboundSchema;
    /** @deprecated use `RequestBody1$outboundSchema` instead. */
    export const outboundSchema = RequestBody1$outboundSchema;
    /** @deprecated use `RequestBody1$Outbound` instead. */
    export type Outbound = RequestBody1$Outbound;
}

/** @internal */
export const PostRunRequestBody$inboundSchema: z.ZodType<
    PostRunRequestBody,
    z.ZodTypeDef,
    unknown
> = z.union([z.lazy(() => RequestBody1$inboundSchema), z.lazy(() => Two$inboundSchema)]);

/** @internal */
export type PostRunRequestBody$Outbound = RequestBody1$Outbound | Two$Outbound;

/** @internal */
export const PostRunRequestBody$outboundSchema: z.ZodType<
    PostRunRequestBody$Outbound,
    z.ZodTypeDef,
    PostRunRequestBody
> = z.union([z.lazy(() => RequestBody1$outboundSchema), z.lazy(() => Two$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostRunRequestBody$ {
    /** @deprecated use `PostRunRequestBody$inboundSchema` instead. */
    export const inboundSchema = PostRunRequestBody$inboundSchema;
    /** @deprecated use `PostRunRequestBody$outboundSchema` instead. */
    export const outboundSchema = PostRunRequestBody$outboundSchema;
    /** @deprecated use `PostRunRequestBody$Outbound` instead. */
    export type Outbound = PostRunRequestBody$Outbound;
}

/** @internal */
export const PostRunResponseBody$inboundSchema: z.ZodType<
    PostRunResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        run_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            run_id: "runId",
        });
    });

/** @internal */
export type PostRunResponseBody$Outbound = {
    run_id: string;
};

/** @internal */
export const PostRunResponseBody$outboundSchema: z.ZodType<
    PostRunResponseBody$Outbound,
    z.ZodTypeDef,
    PostRunResponseBody
> = z
    .object({
        runId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            runId: "run_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostRunResponseBody$ {
    /** @deprecated use `PostRunResponseBody$inboundSchema` instead. */
    export const inboundSchema = PostRunResponseBody$inboundSchema;
    /** @deprecated use `PostRunResponseBody$outboundSchema` instead. */
    export const outboundSchema = PostRunResponseBody$outboundSchema;
    /** @deprecated use `PostRunResponseBody$Outbound` instead. */
    export type Outbound = PostRunResponseBody$Outbound;
}

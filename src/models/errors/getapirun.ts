/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Error getting output
 */
export type GetApiRunWorkflowsResponseBodyData = {
    error: string;
};

/**
 * Error getting output
 */
export class GetApiRunWorkflowsResponseBody extends Error {
    error: string;

    /** The original data that was passed to this error instance. */
    data$: GetApiRunWorkflowsResponseBodyData;

    constructor(err: GetApiRunWorkflowsResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.error = err.error;

        this.name = "GetApiRunWorkflowsResponseBody";
    }
}

/**
 * Workflow not found
 */
export type GetApiRunResponseBodyData = {
    code: string;
    message: string;
};

/**
 * Workflow not found
 */
export class GetApiRunResponseBody extends Error {
    code: string;

    /** The original data that was passed to this error instance. */
    data$: GetApiRunResponseBodyData;

    constructor(err: GetApiRunResponseBodyData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.code = err.code;

        this.name = "GetApiRunResponseBody";
    }
}

/** @internal */
export const GetApiRunWorkflowsResponseBody$inboundSchema: z.ZodType<
    GetApiRunWorkflowsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        error: z.string(),
    })
    .transform((v) => {
        return new GetApiRunWorkflowsResponseBody(v);
    });

/** @internal */
export type GetApiRunWorkflowsResponseBody$Outbound = {
    error: string;
};

/** @internal */
export const GetApiRunWorkflowsResponseBody$outboundSchema: z.ZodType<
    GetApiRunWorkflowsResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiRunWorkflowsResponseBody
> = z
    .instanceof(GetApiRunWorkflowsResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            error: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiRunWorkflowsResponseBody$ {
    /** @deprecated use `GetApiRunWorkflowsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetApiRunWorkflowsResponseBody$inboundSchema;
    /** @deprecated use `GetApiRunWorkflowsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetApiRunWorkflowsResponseBody$outboundSchema;
    /** @deprecated use `GetApiRunWorkflowsResponseBody$Outbound` instead. */
    export type Outbound = GetApiRunWorkflowsResponseBody$Outbound;
}

/** @internal */
export const GetApiRunResponseBody$inboundSchema: z.ZodType<
    GetApiRunResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        code: z.string(),
        message: z.string(),
    })
    .transform((v) => {
        return new GetApiRunResponseBody(v);
    });

/** @internal */
export type GetApiRunResponseBody$Outbound = {
    code: string;
    message: string;
};

/** @internal */
export const GetApiRunResponseBody$outboundSchema: z.ZodType<
    GetApiRunResponseBody$Outbound,
    z.ZodTypeDef,
    GetApiRunResponseBody
> = z
    .instanceof(GetApiRunResponseBody)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            code: z.string(),
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiRunResponseBody$ {
    /** @deprecated use `GetApiRunResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetApiRunResponseBody$inboundSchema;
    /** @deprecated use `GetApiRunResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetApiRunResponseBody$outboundSchema;
    /** @deprecated use `GetApiRunResponseBody$Outbound` instead. */
    export type Outbound = GetApiRunResponseBody$Outbound;
}

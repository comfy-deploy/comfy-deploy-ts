/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { runCancelRunRunRunIdCancelPost } from "../funcs/runCancelRunRunRunIdCancelPost.js";
import { runGet } from "../funcs/runGet.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Deployment } from "./deployment.js";
import { Workflow } from "./workflow.js";

export class Run extends ClientSDK {
  private _deployment?: Deployment;
  get deployment(): Deployment {
    return (this._deployment ??= new Deployment(this._options));
  }

  private _workflow?: Workflow;
  get workflow(): Workflow {
    return (this._workflow ??= new Workflow(this._options));
  }

  /**
   * Get Run
   */
  async get(
    request: operations.GetRunRunRunIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.WorkflowRunModel> {
    return unwrapAsync(runGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Run
   */
  async cancelRunRunRunIdCancelPost(
    request: operations.CancelRunRunRunIdCancelPostRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(runCancelRunRunRunIdCancelPost(
      this,
      request,
      options,
    ));
  }
}

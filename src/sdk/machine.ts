/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { machineGetV1Machines } from "../funcs/machineGetV1Machines.js";
import { machineGetV1MachinesMachineId } from "../funcs/machineGetV1MachinesMachineId.js";
import { machineListEvents } from "../funcs/machineListEvents.js";
import { machinePostGpuEvent } from "../funcs/machinePostGpuEvent.js";
import { machinePostV1Machines } from "../funcs/machinePostV1Machines.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Machine extends ClientSDK {
  /**
   * Register a machine event
   */
  async postGpuEvent(
    request?: operations.PostGpuEventRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostGpuEventResponseBody> {
    return unwrapAsync(machinePostGpuEvent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get recent gpu events
   */
  async listEvents(
    request: operations.GetMachineMachineIdEventsRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.GetMachineMachineIdEventsResponseBody>> {
    return unwrapAsync(machineListEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new machine
   *
   * @remarks
   * Create a new machine with optional default setting
   */
  async postV1Machines(
    request?: operations.PostV1MachinesRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostV1MachinesResponseBody> {
    return unwrapAsync(machinePostV1Machines(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve all machines for a user
   *
   * @remarks
   * Retrieve details of all machines for the authenticated user, with pagination and optional field selection
   */
  async getV1Machines(
    request: operations.GetV1MachinesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1MachinesResponseBody> {
    return unwrapAsync(machineGetV1Machines(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a specific machine by ID
   *
   * @remarks
   * Retrieve details of a specific machine by its ID, with optional workspace details
   */
  async getV1MachinesMachineId(
    request: operations.GetV1MachinesMachineIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1MachinesMachineIdResponseBody> {
    return unwrapAsync(machineGetV1MachinesMachineId(
      this,
      request,
      options,
    ));
  }
}

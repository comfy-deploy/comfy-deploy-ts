/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sessionCancel } from "../funcs/sessionCancel.js";
import { sessionCreate } from "../funcs/sessionCreate.js";
import { sessionGet } from "../funcs/sessionGet.js";
import { sessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost } from "../funcs/sessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost.js";
import { sessionIncreaseTimeoutSessionIncreaseTimeoutPost } from "../funcs/sessionIncreaseTimeoutSessionIncreaseTimeoutPost.js";
import { sessionList } from "../funcs/sessionList.js";
import { sessionSnapshotSessionSessionSessionIdSnapshotPost } from "../funcs/sessionSnapshotSessionSessionSessionIdSnapshotPost.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Session extends ClientSDK {
  /**
   * Get Session
   */
  async get(
    request: operations.GetSessionSessionSessionIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.SessionResponse> {
    return unwrapAsync(sessionGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Session
   */
  async cancel(
    request: operations.DeleteSessionSessionSessionIdDeleteRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteSessionResponse> {
    return unwrapAsync(sessionCancel(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Machine Sessions
   */
  async list(
    request: operations.GetMachineSessionsSessionsGetRequest,
    options?: RequestOptions,
  ): Promise<Array<components.SessionResponse>> {
    return unwrapAsync(sessionList(
      this,
      request,
      options,
    ));
  }

  /**
   * Increase Timeout
   */
  async increaseTimeoutSessionIncreaseTimeoutPost(
    request: components.IncreaseTimeoutBody,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(sessionIncreaseTimeoutSessionIncreaseTimeoutPost(
      this,
      request,
      options,
    ));
  }

  /**
   * Increase Timeout 2
   */
  async increaseTimeout2SessionSessionIdIncreaseTimeoutPost(
    request:
      operations.IncreaseTimeout2SessionSessionIdIncreaseTimeoutPostRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(
      sessionIncreaseTimeout2SessionSessionIdIncreaseTimeoutPost(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Create Session
   */
  async create(
    request: components.CreateSessionBody,
    options?: RequestOptions,
  ): Promise<components.CreateSessionResponse> {
    return unwrapAsync(sessionCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Snapshot Session
   */
  async snapshotSessionSessionSessionIdSnapshotPost(
    request: operations.SnapshotSessionSessionSessionIdSnapshotPostRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(sessionSnapshotSessionSessionSessionIdSnapshotPost(
      this,
      request,
      options,
    ));
  }
}

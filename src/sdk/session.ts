/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sessionCancel } from "../funcs/sessionCancel.js";
import { sessionGet } from "../funcs/sessionGet.js";
import { sessionIncreaseTimeout } from "../funcs/sessionIncreaseTimeout.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Session extends ClientSDK {
  /**
   * Get Session
   */
  async get(
    request: operations.GetSessionSessionSessionIdGetRequest,
    options?: RequestOptions,
  ): Promise<components.Session> {
    return unwrapAsync(sessionGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Session
   */
  async cancel(
    request: operations.DeleteSessionSessionSessionIdDeleteRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteSessionResponse> {
    return unwrapAsync(sessionCancel(
      this,
      request,
      options,
    ));
  }

  /**
   * Increase Timeout
   */
  async increaseTimeout(
    request: components.IncreaseTimeoutBody,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(sessionIncreaseTimeout(
      this,
      request,
      options,
    ));
  }
}
